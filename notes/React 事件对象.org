# -*- eval: (setq org-media-note-screenshot-image-dir (concat default-directory "./static/React 事件对象/")); -*-
:PROPERTIES:
:ID:       ECF0BAA7-AA6C-41B0-816E-28809FE74F2C
:END:
#+LATEX_CLASS: my-article
#+DATE: <2022-07-01 Fri 13:49>
#+TITLE: React 事件对象

#+BEGIN_SRC javascript
class Input extends Component {
  constructor (props) {
    super(props)
    this.state = { name: '-' }
  }

  handleChange (event) {
    this.setState({ name: event.target.value.toUpperCase() })
  }

  shouldComponentUpdate () {
    console.log('shouldComponentUpdate')
    console.log('In shouldComponentUpdate:', this.state)
    return true
  }

  componentDidUpdate () {
    console.log('componentDidUpdate')
    console.log('In componentDidUpdate:', this.state)
  }

  render () {
    return (<input type='text'
      defaultValue='Shawn'
      value={this.state.name}
      onChange={this.handleChange.bind(this)} />)
  }
}
#+END_SRC

在下面的例子中, handleChange 也是使用 bind 调用, 但是有个弊端, 就是如果 handleChang
内容是可重用的, 需要抽象出来, 这时使用 bind 就不够灵活, 就必须使用 narrow function。

#+BEGIN_SRC javascript
export class ShippingDetails extends Component {
  constructor (props) {
    super(props)
    this.state = {
      fullName: '',
      contactNumber: '',
      shippingAddress: '',
      error: false }
  }

  _renderError () {
    if (this.state.error) {
      return (<div className='alert alert-danger'>
        {this.state.error}
      </div>)
    }
  }

  _validateInput () {
    if (this.state.fullName === '') {
      this.setState({ error: 'Please enter full name' })
    } else if (this.state.contactNumber === '') {
      this.setState({ error: 'Please enter contact number' })
    } else if (this.state.shippingAddress === '') {
      this.setState({ error: 'Please enter shipping address' })
    } else {
      this.setState({ error: false })
      return true
    }
  }

  handleSubmit (event) {
    event.preventDefault()
    let formData = {
      fullName: this.state.fullName,
      contactNumber: this.state.contactNumber,
      shippingAddress: this.state.shippingAddress
    }

    if (this._validateInput()) {
      this.props.updateFormData(formData)
    }
  }

  handleChange (event, attribute = 'fullName') {
    let newState = this.state
    newState[attribute] = event.target.value
    this.setState(newState, () => console.log('file:Form.js,\
                                         function: ShippingDetails.handleChange,\
                                             line:208'))
  }

  render () {
    var errorMessage = this._renderError()
    return (
      <div>
        <h1>
          Enter your shipping information.
        </h1>
        {errorMessage}
        <div style={{ width: 200 }}>
          <form onSubmit={this.handleSubmit.bind(this)}>
            <div className='form-group'>
              <input
                className='form-control'
                type='text'
                placeholder='Full Name'
                value={this.state.fullName}
                onChange={this.handleChange.bind(this)}
              />
            </div>
            <div className='form-group'>
              <input
                className='form-control'
                type='text'
                placeholder='Contact number'
                value={this.state.contactNumber}
                onChange={(event) => this.handleChange(event, 'contactNumber')}
              />
            </div>
            <div className='form-group'>
              <input
                className='form-control'
                type='text'
                placeholder='Shipping Address'
                value={this.state.shippingAddress}
                onChange={(event) => this.handleChange(event, 'shippingAddress')}
              />
            </div>
            <div className='form-group'>
              <button
                type='submit'
                ref='submit'
                className='btn btn-success'>
                Submit
              </button>
            </div>
          </form>
        </div>
      </div>)
  }
}
#+END_SRC

#+BEGIN_SRC js
export class ShippingDetails extends Component {
    constructor(props) {
        super(props);
        this.state = {
                      fullName:        "",
                      contactNumber:   "",
                      shippingAddress: "",
                      error:           false};
    }

    _renderError() {
        if (this.state.error) {
            return(<div className="alert alert-danger">
                       {this.state.error}
                   </div> );
        }
    }

    _validateInput() {
        if (this.state.fullName === "") {
            this.setState({error: "Please enter full name"});
        }
        else if (this.state.contactNumber === "") {
            this.setState({error: "Please enter contact number"});
        }
        else if (this.state.shippingAddress === "") {
            this.setState({error: "Please enter shipping address"});
        }
        else {
            this.setState({error: false});
            return true;
        }
    }

    handleSubmit(event) {
        event.preventDefault();
        let formData = {
            fullName:        this.state.fullName,
            contactNumber:   this.state.contactNumber,
            shippingAddress: this.state.shippingAddress
        }

        if (this._validateInput()) {
            this.props.updateFormData(formData);
        }
    }

    handleChange(event, attribute) {
        let newState = this.state;
        newState[attribute] = event.target.value;
        this.setState(newState, () => console.log("file:Form.js,\
                                         function: ShippingDetails.handleChange,\
                                             line:208",));
    }

    render() {
        var errorMessage = this._renderError();
        return(
        <div>
            <h1>
                Enter your shipping information.
            </h1>
            {errorMessage}
            <div style={{width: 200}}>
                <form onSubmit={this.handleSubmit.bind(this)}>
                    <div className="form-group">
                        <input
                           className    ="form-control"
                            type        ="text"
                            placeholder ="Full Name"
                            value       ={this.state.fullName}
                            onChange    ={(event) => this.handleChange.bind(event, "fullN")}
                        />
                    </div>
                    <div className="form-group">
                        <input
                            className   ="form-control"
                            type        ="text"
                            placeholder ="Contact number"
                            value       ={this.state.contactNumber}
                            onChange    ={(event) => this.handleChange(event, 'contactNumber')}
                        />
                    </div>
                    <div className="form-group">
                        <input
                            className   ="form-control"
                            type        ="text"
                            placeholder ="Shipping Address"
                            value       ={this.state.shippingAddress}
                            onChange    ={(event) => this.handleChange(event, 'shippingAddress')}
                        />
                    </div>
                    <div className="form-group">
                        <button
                            type      ="submit"
                            ref       ="submit"
                            className ="btn btn-success">
                            Submit
                        </button>
                    </div>
                </form>
            </div>
        </div> );
    }
}
#+END_SRC

