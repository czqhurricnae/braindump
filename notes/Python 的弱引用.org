# -*- eval: (setq org-download-image-dir (concat default-directory "./static/Python 的弱引用/")); -*-
:PROPERTIES:
:ID:       21251ACC-4904-414A-9BD9-6A3733EEA387
:END:

#+DATE: <2020-06-28 Sun 13:59>
#+TITLE: Python 的弱引用

python 的弱引用指引用一个对象但不增加它的引用计数器。这么做的好处是什么呢？什么时候需要考虑用若引用呢？

假设我们在设计一个游戏，有一个角色类 Char，我们要给他添加一个效果（比如中毒），于是设计了一个效果类 Effect。现在，给角色增加效果看上去就像这样：

#+BEGIN_SRC python :results values list :exports no-eval
    char.effect = Effect() # 给角色添加一个效果
#+END_SRC

每个效果生效的时机都是不同的，为了方便复用，我们再设计一个激活策略类 ActivePloy，负责激活效果。于是在 Effect 和 ActivePloy 的内部看上去就像这样：

#+BEGIN_SRC python :results values list :exports no-eval
class Effect(object):
    def __init__(self):
        self.active_ploy = ActivePloy(self)      

    def active(self):  
        """激活时的处理"""  
        pass   


class ActivePloy(object):     
    def __init__(self, effect):  
        self.effect = effect      

    def active(self):  
        """激活时，激活对应效果"""  
        self.effect.active() 
#+END_SRC

这样做的好处是 Effect 不用关心自己何时激活，激活的判断都放给 ActivePloy 来处理。看上去挺好的，但是，这里面有一个问题，就是当我们试图给玩家去掉这个效果时......

#+BEGIN_SRC python :results values list :exports no-eval
    del char.effect 
#+END_SRC

仔细想想，这么干以后，Effect 的实例其实是没有被回收的，因为 Effect 和 ActivePloy 交叉引用，他们的引用计数都为 1。

那么我们为了干净的删除 effect，似乎就只能手动的来清理一下他们之间的这个交叉引用了：

#+BEGIN_SRC python :results values list :exports no-eval
class Effect(object):        
    def __init__(self):            
        self.active_ploy = ActivePloy(self)

    def active(self):          
    """激活时的处理"""          
        pass        

    def destroy(self):         
        self.active_ploy.destroy()   


class ActivePloy(object):      
    def __init__(self, effect):          
        self.effect = effect        

    def active(self):          
    """激活时，激活对应效果"""          
        self.effect.active()      

    def destroy(self):         
        self.effect = None 
#+END_SRC

于是我们要删除一个效果，就得这样：

#+BEGIN_SRC python :results values list :exports no-eval
    char.effect.destroy() 
    del char.effect 
#+END_SRC

太麻烦了，不是吗？而且万一一个效果有多个激活策略的话，必须保证 Effect 把每个 ActivePloy 的 destroy 方法都运行一遍，漏了一个都无法保证自身被干净的删除。

我们来分析一下，之所以这么麻烦，就是因为 ActivePloy 对 Effect 有一个引用。那么如果 ActivePloy 不引用 Effect 不就 OK 了？这个时候，让我们来试试弱引用。

#+BEGIN_SRC python :results values list :exports no-eval
import weakref 


class Effect(object):        
    def __init__(self):            
        self.active_ploy = ActivePloy(self)

    def active(self):
        """激活时的处理"""          
        pass      


class ActivePloy(object):      
    def __init__(self, effect):          
        self.effect = weakref.proxy(effect) # 弱引用effect       

    def active(self):          
    """激活时，激活对应效果"""          
        self.effect.active() 
#+END_SRC

代码只有一个地方改变了，就是

#+BEGIN_SRC python :results values list :exports no-eval
    self.effect = weakref.proxy(effect) 
#+END_SRC

这句的效果就是 self.effect 可以像往常一样的使用，但是却不会增加 effect 的引用计数器。换言之，这样写，他们之间的交叉关系消失了！这个时候我们只需要单纯的删掉 char.effect，Effect 和 ActivePloy 的实例都会被销毁。

什么，假设 ActivePloy 在其他地方也被引用了？这样当然只有 effect 会被销毁。但是我们想让 ActivePloy 必然随着 Effect 的销毁而销毁，怎么办呢？那么我们可以改改，给弱引用加上一个回调函数：

#+BEGIN_SRC python :results values list :exports no-eval
class ActivePloy(object):
    def __init__(self, effect):
        self.effect = weakref.proxy(effect, self.on_effect_destroy) # 弱引用effect

    def active(self):           
    """激活时，激活对应效果"""           
        self.effect.active()       

    def on_effect_destroy(self, effect):
        """effect销毁时会调用这个方法，在这里把对自己的引用都清理干净吧"""
        pass 
#+END_SRC

这样一来，就不用担心删不干净了。
