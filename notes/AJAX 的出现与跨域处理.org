# -*- eval: (setq org-download-image-dir (concat default-directory "./static/AJAX 的出现与跨域处理/")); -*-
:PROPERTIES:
:ID:       1BDD71AF-3500-43CE-80E6-C03B1ED35B94
:END:
#+LATEX_CLASS: my-article

#+DATE: <2020-12-05 Sat 15:27>
#+TITLE: AJAX 的出现与跨域处理

* 如何发请求
[[file:./static/AJAX 的出现与跨域处理/v2-407bf7f41050e89257739eafc5760e04_hd.jpg]]

想用 =GET= ， =POST= ， =PUT= ， =DELETE= 方法，不想刷新整个页面，想用一种更易于理解的方式来响应。

* AJAX 出现

** 浏览器和服务器交互模式 V1.0

 在 =AJAX= 未出现之前，浏览器想从服务器获得资源，会经过如下一个过程：

 - 浏览器发起请求->服务器接到请求响应给你 HTML 文档->浏览器收到资源，刷新页面，加载获得的的 HTML。

 称这种交互方式是 V1.0，此时还是以获取资源为导向。

** 交互模式 2.0
 大约 1999 年，微软发布 =IE 5.0= 版本，它允许 JavaScript 脚本向服务器发起 HTTP 请求。
 不过很遗憾，当时也没有火起来，直到 2004 年 Gmail 发布和 2005 年 Google Map 发布，才引起广泛重视。
 2005 年，一个叫 Jesse James Garrett 的人提出了一个新术语 =AJAX= ，它是一系列技术的组合体，全称是 =Asynchronous JavaScript + XML= （异步的 JS 和 XML）可以阻止页面整体刷新，只是动态响应用户的操作，快速显示到局部，用户就可以很愉快的继续上网了。

 [[https://developer.mozilla.org/zh-CN/docs/Web/Guide/AJAX][AJAX]]

** XMLHttpRequest

 =XMLHttpRequest= 对象是用来在浏览器和服务器之间传输数据的。

 古代的操作的是：
 - 浏览器构造 =XMLHttpRequest= 实例化对象。
 - 用这个对象发起请求。
 - 服务器响应一个 =XML= 格式的字符串，是字符串，是字符串，是字符串，也就是说响应的第四部分是字符串。
 - JS 解析符合 XML 格式的字符串，更新局部页面。

 什么是[[https://link.zhihu.com/?target=https://link.jianshu.com/?t=https://developer.mozilla.org/zh-CN/docs/XML_%E4%BB%8B%E7%BB%8D][XML]]，可扩展标记语言。

 以上是最初的用法，用的是 =XML= ，前端代码片段如下：

 #+BEGIN_SRC js :results values list :exports no-eval
 let request = new XMLHttpRequest() //实例化XMLHttpRequest对象
       request.onreadystatechange = () => {
         if (request.readyState === 4) {
             console.log('请求和响应都完毕了。');

           if (request.status >= 200 && request.status <= 300) {
               console.log('说明请求成功了。');
               console.log(request.responseText);
               let parser = new DOMParser();
               let xmlDoc = parser.parseFromString(request.responseText, "text/xml");
               // 用 parser 解析 request.responseText。
               // let c = xmlDoc.getElementsByTagName('body')[0].textContent
               console.log(c);
           } else if (request.status >= 400)  {
               console.log('说明请求失败了');
           }
         }
       }
 request.open('GET', '/xxx') // 配置request。
 request.send()
 #+END_SRC

 服务器端的对应代码片段如下：

 #+BEGIN_SRC js :results values list :exports no-eval
 ...
   response.statusCode = 200
   response.setHeader('Content-Type', 'text/xml;charset=utf-8')
   response.write(`
   <note>
     <to>木木</to>
     <from>少少</from>
     <heading>你好哇</heading>
     <body>好久不见啊</body>
   </note>
   `)
   response.end()
   ...
 #+END_SRC

 本地模拟的话，一定要记得开俩不同的端口，例如：

 #+BEGIN_SRC js :results values list :exports no-eval
 node server.js 8001
 node server.js 8002
 #+END_SRC

* XMLHttpRequest 实例的[[https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest][详解]]

正如上面的前端代码片段写的一样，主要用到了 =open()= ， =send()= 方法， =onreadystatechange= ， =readyState= 属性。

** request.open(method, URL, async)
 - method 是请求的方法，可以用 =GET= 、 =POST= 、 =DELETE= ， =PUT= 等等。
 - URL 是用访问的路径。
 - async 是是否使用异步，默认 true, 开启异步。如果非要写 false，开启同步，[[http://javascript.ruanyifeng.com/bom/ajax.html][会对浏览器有阻塞效应]]，而且如果值为 false,则 =send()= 方法[[https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest][不会返回任何东西]]，直到接受到了服务器的返回数据。

** request.send()
 发送请求。 如果该请求是异步模式（默认），该方法会立刻返回。相反，如果请求是同步模式，则直到请求的响应完全接受以后，该方法才会返回

** readyState
 描述请求的五个状态。

 - 0：常量，表示 =UNSENT= （未打开）， =open()= 方法未调用。
 - 1：表示 =OPENED= （未发送），只是 =open()= 方法调用了。
 - 2：表示 =HEADERS_RECEIVED= （已获取响应头）， =send()= 方法调用了，响应头和响应状态已经返回了。
 - 3：表示 =LOADING= （正在下载响应体），响应体下载中， =responseText= 已经获取了部分数据。
 - 4：表示 =DONE= （请求完成），整个响应过程完毕了，这个值是实际中用到的，只要不等于 4，就表示请求还在进行中。

** responseText
 此属性是此次响应的文本内容。

** onreadystatechange
 - =readyState= 属性的值发生改变，就会触发 =readyStateChange= 事件。
 - 可以通过 =onReadyStateChange= 属性，指定这个事件的回调函数，对不同状态进行不同处理。尤其是当状态变为 4 的时候，表示通信成功，这时回调函数就可以处理服务器传送回来的数据。即前面的代码片段的处理方式。

** 其他的方法、属性、事件
 详见[[http://javascript.ruanyifeng.com/bom/ajax.html#toc22][阮一峰博客]]、[[https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest][MDN文档]]。

 习惯用 =javaScript= 的前端是不想和 =XML= 打交道的，应该用一种符合 =js= 风格的数据格式语言。

* JSON
一个美国程序员[[https://zh.wikipedia.org/wiki/%E9%81%93%E6%A0%BC%E6%8B%89%E6%96%AF%C2%B7%E5%85%8B%E7%BE%85%E5%85%8B%E7%A6%8F%E7%89%B9][道格拉斯·克罗克福特]]发明了 =JSON= ，解决了上面的问题，这货还写了一本蝴蝶书[[https://book.douban.com/subject/3590768/][JavaScript语言精粹]]，还发明了一个[[http://zhenhua-lee.github.io/tools/linter.html][JS校验器]] JSLint。

#+BEGIN_QUOTE
JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。 易于人阅读和编写。同时也易于机器解析和生成。
它基于[[https://link.jianshu.com/?t=http://www.crockford.com/javascript][JavaScript Programming Language]], [[http://www.ecma-international.org/publications/files/ecma-st/ECMA-262.pdf][Standard ECMA-262 3rd Edition - December 1999]]的一个子集。
JSON 采用完全独立于语言的文本格式，但是也使用了类似于 C 语言家族的习惯（包括 C, C++, C#, Java, JavaScript, Perl, Python 等）。
这些特性使 JSON 成为理想的数据交换语言。
#+END_QUOTE

以上是[[http://json.org/][JSON官网]]的简介，可以看出它是一门全新的语言，[[https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON][不是JavaScript的子集]]。

** JSON 数据类型

 [[file:./static/AJAX 的出现与跨域处理/v2-ed5d5735056047fa5e024c1a3826c245_hd.jpg]]

**  浏览器解析 JSON
 浏览器的全局对象 =window= 上有 =JSON= 对象，直接使用 =window.JSON.parse(string)= 。

 #+BEGIN_SRC js :results values list :exports no-eval
 let string = request.responseText
 let json = window.JSON.parse(string) // string 要符合JSON的格式。
 #+END_SRC

 以上是 JSON 解析部分的代码。

 此时服务器端代码是

 #+BEGIN_SRC js :results values list :exports no-eval
 response.statusCode = 200
 response.setHeader('Content-Type', 'text/json;charset=utf-8')
 response.write(`
     {
       "note" : {
         "to" : "木木",
         "from" : "少少",
         "heading" : "你好哇",
         "content" : "好久不见啊"
       }
     }
 `)
 #+END_SRC

* 浏览器的同源政策
浏览器有同源政策，不是 =同协议 同域名 同端口= 的网页无法相互访问。 =AJAX= 恰好是同源政策的拥趸。

** CORS
 - 如果 =AJAX= 向非同源的地址发起请求，会报错。这种错误无法通过状态码识别，因为 HTTP 回应的状态码有可能是 200，也就是说即使你看到了 200 的正确码，也没有用。
 - form 表单无视同源政策，可以发起跨域请求。

 #+BEGIN_SRC js :results values list :exports no-eval
 <button id="myButton">点我</button>
 <form action="https://www.baidu.com" method="get">
    <input type="password" name="password">
    <input type="submit" value="提交">
 </form>
 #+END_SRC

 上述请求响应都没有问题， 然而对于 =AJAX= 就不行。

 #+BEGIN_SRC js :results values list :exports no-eval
 ...
 request.open('GET', 'http://www.baidu.com')
 ...
 #+END_SRC

 #+CAPTION: 同源的保护
 [[file:./static/AJAX 的出现与跨域处理/v2-b7cdac44bdb99ff904172fab81c63370_hd.jpg]]

 是为什么呢,因为：

 #+BEGIN_QUOTE
 原页面用 form 提交到另一个域名之后，原页面的脚本无法获取新页面中的内容，所以浏览器认为这是安全的。
 而 AJAX 是可以读取响应内容的，因此浏览器不能允许你这样做。如果你细心的话你会发现，其实请求已经发送出去了，你只是拿不到响应而已。

 所以浏览器这个策略的本质是，一个域名的 JS，在未经允许的情况下，不得读取另一个域名的内容。但浏览器并不阻止你向另一个域名发送请求。
 #+END_QUOTE

 那么如何让 =AJAX= 跨域发起请求呢。答案是 =CORS= 。

 =CORS= 目前是 W3C 的标准，它允许浏览器跨域发起 =XMLHttpRequest= 请求，而且可以发起多种请求，不像 =JSONP= 只能发起 =GET= 请求，全称是"跨域/源资源共享"（Cross-origin resource sharing）。

 - 如果想要发起跨域请求，例如：[[https://link.zhihu.com/?target=https://link.jianshu.com/?t=http://wushao.com:8001][http://wushao.com:8001]]要想访问[[https://link.zhihu.com/?target=https://link.jianshu.com/?t=http://shaolin.com:8002][http://shaolin.com:8002]],可以做如下处理：

 #+BEGIN_SRC js :results values list :exports no-eval
 request.open('GET', 'http://wushao.com:8001/xxx') // 配置request。
  #+END_SRC

 - 服务器端的代码需要做如下处理：

 #+BEGIN_SRC js :results values list :exports no-eval
 response.setHeader('Access-Control-Allow-Origin', 'http://shaolin.com:8002')
 #+END_SRC

 一定要注意是谁去访问谁，8001 去访问 8002，那么 8001 的前端代码要告诉 8002 的后端代码，咱们是一家人，你和浏览器说说别让它禁我了。

* AJAX 一些其他知识

既然可以发请求，那么请求头的四部分如何获得的，响应的四部分又是如何获得呢。

** 获得请求头和响应
*** 获得请求头的方法

  #+BEGIN_SRC js :results values list :exports no-eval
  request.open('GET', 'http://shaolin.com:8002/xxx') // 请求的第一部分。
  request.setRequestHeader('Content-Type', 'x-www-form-urlencoded') // 请求的第二部分。
  request.setRequestHeader('wushao', '18') // 请求的第三部分。
  request.send('我要设置请求的第四部分') // 请求的第四部分。
  request.send('name=wushao&password=wushao') // 请求的第四部分。
    #+END_SRC

  对应的典型的 http 请求四部分：

  #+BEGIN_SRC js :results values list :exports no-eval
  GET /xxx HTTP/1.1
  HOST: http://shaolin.com:8002
  Content-Type: x-www-form-urlencoded
  wushao: 18

  name=wushao&password=wushao
  #+END_SRC

*** 获得响应的方法

   #+BEGIN_SRC js :results values list :exports no-eval
   request.status // 响应的第一部分 200。
   request.statusText // 响应的第一部分 OK。
   request.getAllResponseHeaders // 响应的第二部分，这个方法好啊，全部的响应头。
   request.getResponseHeader('Content-Type') // 响应的第二部分具体的。
   request.responseText // 响应的第四部分。
   #+END_SRC

   对应的典型的 http 响应的四部分：

   #+BEGIN_SRC js :results values list :exports no-eval
   HTTP/1.1 200 OK
   Content-Type: text/json;charset=utf-8

   {
         "note" : {
           "to" : "木木",
           "from" : "少少",
           "heading" : "你好哇",
           "content" : "好久不见啊"
         }
    }
   #+END_SRC

   回顾一下各个 status 对应的意思：

   #+BEGIN_SRC js :results values list :exports no-eval
   100
   200 === OK，请求成功。
   301 === 被请求的资源已永久移动到新位置。
   302 === 请求临时重定向，要求客户端执行临时重定向。
   304 === 和上次请求一样，未改变。
   403 === 服务器已经理解请求，但是拒绝访问。
   404 === 请求失败，服务器上没有这个资源。
   502 === 作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。
   503 === Service Unavailable 由于临时的服务器维护或者过载，服务器当前无法处理请求。
  #+END_SRC

* 练习一下 JQuery 封装 AJAX
** 初级的 jq 封装

 #+BEGIN_SRC js :results values list :exports no-eval
 window.jQuery = function (nodeOrSelector) {
   let nodes = {}
   nodes.addClass = function () {}
   nodes.html = function () {}
   return nodes
 }

 window.jQuery.ajax = function (options) {
   let url = options.url
   let method = options.method
   let headers = options.headers
   let body = options.body
   let successFn = options.successFn
   let failFn = options.failFn

   let request = new XMLHttpRequest() //实例化 XMLHttpRequest 对象。
   request.open(method, url)
   for (let key in headers) {
     let value = headers[key]
     request.setRequestHeader(key, value)
   }
   request.onreadystatechange = () => {
     if (request.readyState === 4) {
       if (request.status >= 200 && request.status <= 300) {
         successFn.call(undefined, request.responseText)
       } else if (request.status >= 400)  {
         failFn.call(undefined, request)
       }
     }
   }
   request.send(body)
 }
   #+END_SRC

 以上就是 jq 对 ajax 的简陋的封装， =ajax()= 方法接受一个对象作为参数，这个对象有很多键。这些键就是 http 请求的头的各个部分，以及一个成功函数和一个失败函数。

 #+BEGIN_SRC js :results values list :exports no-eval
 myButton.addEventListener('click', (e) => {
     window.jQuery.ajax ({
         url: '/xxx',
         method: 'POST',
         headers: {
             'content-type': 'application/x-www-form-urlencoded',
             'wushao': '18'
         },
         body: 'a=1&b=6',
         successFn: (x) => {
             ...
         },
         failFn: (x) => {
             ...
         }
     })
 })
  #+END_SRC

 以上就是简化后的使用方法，给 button 绑定事件的时候，函数体直接就是 =ajax()= 。

 目前你会发现 options 这个对象傻傻的，因为总有一些用户不希望只传一个参数。所以我们稍微改造一下。

 #+BEGIN_SRC js :results values list :exports no-eval
 let url
   if (arguments.length === 1) {
     url = options.url
   } else if (arguments.length === 2) {
      url = arguments[0]
      options = arguments[1]
   }

   let method = options.method
   let headers = options.headers
   let body = options.body
   let successFn = options.successFn
   let failFn = options.failFn
  #+END_SRC

 加了一点，判断 =ajax()= 的参数个数。

** 使用 Promise 封装
 一千个人有一千零一个成功或失败函数的写法，所以为了维护世界和平，大家约定俗成了一套理论 =Promise= ， =then()= 。

 #+BEGIN_SRC js :results values list :exports no-eval
 window.Promise = function (fn) {
     //...一些其他代码。
     return {
         then: function () {}
     }
 }
  #+END_SRC

 Promise 这个构造函数呢，又会返回一个对象，这个返回的对象有一个 then 属性，value 又是一个函数。处处都体现着函数是第一公民的地位。

 那我们可以利用这个强大的 Promise 对象搞一些事情了。

 #+BEGIN_SRC js :results values list :exports no-eval
 // 第一步的代码改造成这样，第一步用到了ES6的解构赋值法。
 window.jQuery.ajax = function ({url, method, body, headers}) {
     return new Promise(function (resolve, reject) {
         let request = new XMLHttpRequest()
         request.open(method, url)

         for(let key in headers) {
             let value = headers[key]
             request.setRequestHeader(key, value)
         }

         request.onreadystatechange = () => {
             if (request.readyState === 4) {
                 if (request.status >= 200 && request.status <= 300) {
                     resolve.call(undefined, request.responseText)
                 } else if (request.status >= 400) {
                     reject.call(undefined, request)
                 }
             }
         }
         request.send(body)
     })
 }
 #+END_SRC

 #+BEGIN_SRC js :results values list :exports no-eval
 // 经过上面这么一折腾，可以很简单的使用了。
 myButton.addEventListener('click', (e) => {
     let promise = window.jQuery.ajax({
         url: '/xxx',
         method: 'get',
         headers: {
             'content-type': 'application/x-www-form-urlencoded',
             'wushao': '18'
         }
     })

     promise.then(
         (responseText) => {
             console.log(responseText)
         },
         (request) => {
             console.log(request)
         }
     )
 })
 #+END_SRC

 注意 then 可以传入两个函数，第一个函数表示成功了执行这个，第二个函数表示失败了执行这个，而且可以进行链式调用，一直点下去。

 所以实际上 jq 的写法大多是这么写的

 #+BEGIN_SRC js :results values list :exports no-eval
 myButton.addEventListener('click', (e) => {
     $.ajax({
         url: '/xxx',
         type: 'GET',
     }).then(
         (responseText) => {
             console.log(responseText)
             return responseText
         },
         (request) => {
             console.log('error')
             return '已经处理'
         }
     ).then(
         (responseText) => {
             console.log(responseText)
         },
         (request) => {
             console.log(error2)
         }
     )
 })
 #+END_SRC

 链式调用的意思就是：成功函数成功了，就执行第二个 then 的第一个函数；成功函数失败了，就执行第二个 then 的第二个函数。

 完整代码详见[[https://github.com/codevvvv9/AJAXDemo_nodeJsServer][我的gitHub]]
