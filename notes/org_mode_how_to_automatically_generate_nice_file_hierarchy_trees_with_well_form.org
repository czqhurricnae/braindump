# -*- eval: (setq org-download-image-dir (concat default-directory "./static/org_mode_how_to_automatically_generate_nice_file_hierarchy_trees_with_well_form/")); -*-
#+LATEX_CLASS: my-article
#+DATE: <2022-07-09 Jul 06:33>
#+TITLE: org_mode_how_to_automatically_generate_nice_file_hierarchy_trees_with_well_form
#+ROAM_KEY: https://stackoverflow.com/questions/47891892/org-mode-how-to-automatically-generate-nice-file-hierarchy-trees-with-well-form

* Question
  :PROPERTIES:
  :CUSTOM_ID: question
  :END:
When working with Org-Mode, I am looking for a solution to automatically
generate tree of well-formed org-mode links.

For instance, to create links to all c++ files under a directory, I want
something like:

[[file:./static/org_mode_how_to_automatically_generate_nice_file_hierarchy_trees_with_well_form/380.jpeg]]

--------------

*Update:* I just tried @DamianChrzanowski suggestion, the
[[https://github.com/emacsmirror/org-fstree][org-fstree]] package.
However I am a little bit disappointed by the results:

[[file:./static/org_mode_how_to_automatically_generate_nice_file_hierarchy_trees_with_well_form/791.jpeg]]

The html export result is even worst:

[[file:./static/org_mode_how_to_automatically_generate_nice_file_hierarchy_trees_with_well_form/1004.jpeg]]

My conclusion is that package does not fulfil my needs. Anyway, thanks
to @DamianChrzanowski for his answer.

* Answer1
  :PROPERTIES:
  :CUSTOM_ID: answer1
  :END:

With the [[https://www.computerhope.com/unix/tree.htm][linux tree command]] installed I came with the following script that fulfils all myneeds:

$ brew install tree
使用前先安装 ~tree~ 命令。

#+NAME: createTree
#+BEGIN_SRC sh :results drawer :var toInclude="*.org" :var toExclude="" :var directory="./" :var createLink="true" :exports none
set -e
buffer=$(mktemp /tmp/buffer.XXXXXXXXX)
current_directory=$(pwd)
cd $(eval echo "$directory")
tree -a -P "$toInclude" -I "$toExclude" -if --noreport  --prune \
    | sed "s/.//"  | sed "s/^\///"  > "$buffer"

if [ $(grep --regexp="$" --count "$buffer") -eq 0 ]; then
    echo "**ERROR empty list**"
else
    for f in $(cat "$buffer")
    do 
    filename=$(basename $f)
    ext="${filename##*.}"
    baseFilename="${filename%.*}"
    if [ -f $f ]; then
        # removes org extension (only)
        if [ "$ext" = "org" ]; then
        filename="$baseFilename"
        fi
        # creates org link (or not)
        if [ "$createLink" = true ]; then 
        echo "$(echo "$f" | tr -cd / | tr / \\t)+ [[file:"$directory/$f"][$filename]]"
        else
        echo "$(echo "$f" | tr -cd / | tr / \\t)+ $filename"
        fi
    else
        echo  "$(echo "$f" | tr -cd / | tr / \\t)+ $filename/"
    fi
    done
fi
rm "$buffer"
cd "$current_directory"
#+END_SRC
#+END_SRC

If you want to create a file tree of your C++ code, simply use something like:

#+BEGIN_SRC sh
#+CALL: createTree(toInclude="*.[hc]pp",toExclude="*test*",directory="~/MyProject")
#+END_SRC

Also, note that you can use it as an alternative to sitemap when you export/publish your org-mode documents. Simply use:

#+begin_example
* My site content
#+CALL: createTree(toInclude="*.org",toExclude="Setup")
#+end_example

The previous =#+CALL= commands will generate tree like the one I posted in my question. After Org HTML export, you will get something like:
[[file:./static/org_mode_how_to_automatically_generate_nice_file_hierarchy_trees_with_well_form/3280.jpeg]]

--------------

The command arguments/options are:

- *toInclude="..."* : pattern to include
- *toExclude="..."* : pattern to exclude
- *directory="..."* : directory
- *createLink="true" or "false"* : if false the tree is created without
  links

--------------

*Note 1:* you can store the script in any .org file and load it thanks to [[http://orgmode.org/manual/Library-of-Babel.html][Library-of-Babel]]:

In your =init.el= file:

#+BEGIN_SRC sh
(org-babel-lob-ingest "~/path/to/your/scripts.org")
#+END_SRC

--------------

*Note 2:* I answered my own question, but I am still open to a pure Emacs-Lisp solution.

* Answer2
  :PROPERTIES:
  :CUSTOM_ID: answer2
  :END:

There usually is a package :-) [[https://melpa.org/#/org-fstree][org-fstree]]

* Answer3
  :PROPERTIES:
  :CUSTOM_ID: answer3
  :END:

I just tried [[https://github.com/ScriptDevil/org-fs-tree][org-fs-tree]] and it seems to do the job well. It's a newer package, looks like =org-fstree= is orphaned.
