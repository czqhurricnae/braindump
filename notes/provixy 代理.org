# -*- eval: (setq org-download-image-dir (concat default-directory "./static/provixy 代理/")); -*-
:PROPERTIES:
:ID:       65F79298-60C9-40B0-BCA2-C67CB2D77A94
:END:
#+LATEX_CLASS: my-article
#+DATE: <2020-10-25 Sun 20:56>
#+TITLE: provixy 代理

* 背景
使用 ~org-download-iamge~ 下载 stackoverflow 上的图片。

#+BEGIN_SRC emacs-lisp :results raw drawer values list :exports no-eval
(org-download-image "https://i.stack.imgur.com/DDBUO.png")
#+END_SRC

出现如下错误：
#+DOWNLOADED: screenshot @ 2020-10-25 20:57:26
[[file:./static/provixy 代理/2020-10-25_20-57-26_screenshot.jpg]]

使用 ~with-proxy~ 包，仍然没能解决问题。

#+BEGIN_SRC emacs-lisp :results values :exports no-eval
(with-proxy (org-download-image "https://i.stack.imgur.com/DDBUO.png"))
#+END_SRC

虽然 6ftlane 的代理开启了“全局模式”，但是 Emacs 还是无法通过代理访问所需要的网址。

对于经常需要依赖国外资源的开发者，终端的下载速度让人抓狂，诸如常见的 wget、curl、git、brew 等命令行工具超慢，甚至无法获取资源，这就需要搭建一个科学上网利器，
例如目前流行的 shadowsocks ，我们配置好 shadowsocks 服务器端后，安装对应系统的客户端便可，然而当你构建的时候还是会很慢，这时你发现系统自带的终端或 iTerm 2 是不走 =Socks5= 。

因终端下 =Socks5= 代理的支持并不太友好，遂改用 =http= 代理，达到目的。

* 解决思路
在 Linux 系统下相对简单，安装 proxychains-NG 等软件就可以解决了，但在 Mac 下有点麻烦。
OS X 10.11 之前的系统，都还比较顺利，但是 OS X 10.11 之后较新的系统默认设置下不会安装成功。
苹果在新系统中加入了 SIP 安全机制，他会阻止第三方程序向系统目录内（/System，/bin，/sbin，/usr（除了/usr/local））进行写操作， ~sudo~ 也不行。
办法是先把 SIP 关了，等装好软件配置好后再打开 SIP。或者改用其他软件。

关闭 SIP 也麻烦，遂用 privoxy 这个经典软件，它刚好就是安装在/usr/local 内，不需要关闭 SIP 也可以正常使用。

* privoxy
** 安装
 #+BEGIN_SRC sh :results raw drawer values list :exports no-eval
 brew install privoxy
 #+END_SRC

 安装完成后，Emacs 的代理还是无法转发到 6ftlane。

 #+BEGIN_SRC sh :results raw drawer values list :exports no-eval
 c on  master [✘!?] via ⬢ v14.14.0
 ➜ netstat -na | grep 8118
 #+END_SRC

** 配置
   - State "MEETING"    from "CANCELLED"  [2021-05-23 Sun 10:01]
   - State "SOMEDAY"    from "WAITING"    [2021-05-23 Sun 10:01]
   - State "DONE"       from "NEXT"       [2021-05-23 Sun 10:00]
 打开文件 =/usr/local/etc/privoxy/config= ，在文件的最底部，写入以下代码：

 #+BEGIN_SRC sh :results raw drawer values list :exports no-eval
 listen-address 0.0.0.0:8118
 forward-socks5 / localhost:1080 .
 #+END_SRC

 或者使用 ~echo~ 命令写入：

 #+BEGIN_SRC sh :results raw drawer values list :exports no-eval
 cd /usr/local/etc/privoxy/
 echo 'listen-address 0.0.0.0:8118\nforward-socks5 / localhost:1080 .' >> config
 #+END_SRC

 注意： =0.0.0.0= 可以让其他设备访问到，若不需要，请修改成用 =127.0.0.1= ； =8118= 是 HTTP 代理的默认端口。
 =localhost:1080= 是 SOCKS5（shadowsocks） 默认的地址，可根据需要自行修改，且注意不要忘了最后有一个空格和点号。

** 启动 provixy
 因没有安装在系统目录内，所以启动的时候需要打全路径。

 #+BEGIN_SRC sh :results raw drawer values list :exports no-eval
 sudo /usr/local/sbin/privoxy /usr/local/etc/privoxy/config
 #+END_SRC

 查看是否启动成功：

 #+BEGIN_SRC sh :results raw drawer values list :exports no-eval
 netstat -na | grep 8118
 #+END_SRC

 看到有类似如下信息就表示启动成功了：

 #+BEGIN_SRC sh :results raw drawer values list :exports no-eval
 tcp4	0	0  *.8118		*.*		LISTEN
   #+END_SRC

** 开机自动启动 privoxy

 #+BEGIN_SRC sh :results raw drawer values list :exports no-eval
 brew services start privoxy
 #+END_SRC

** 终端中 privoxy 的使用
 经过上面几步 =http(s) -> socks5= ，在命令行终端中输入如下命令后，该终端即可走代理。

 #+BEGIN_SRC sh :results raw drawer values list :exports no-eval
 export http_proxy='http://localhost:8118'
 export https_proxy='http://localhost:8118'
 #+END_SRC

 注意：是当前终端标签页走代理，其他终端标签页或新窗口则不是。

 取消命令：

 #+BEGIN_SRC sh :results raw drawer values list :exports no-eval
 unset http_proxy
 unset https_proxy
 #+END_SRC

 如果关闭终端标签页或窗口，功能就会失效。

 如果需要代理一直生效，则可以把上述两行代码添加到 =~/.bash_profile= 文件最后。

 #+BEGIN_SRC sh :results raw drawer values list :exports no-eval
 vim ~/.bash_profile
 -----------------------------------------------------
 export http_proxy='http://localhost:8118'
 export https_proxy='http://localhost:8118'
 -----------------------------------------------------
 #+END_SRC

 使以上配置立即生效：

 #+BEGIN_SRC sh :results raw drawer values list :exports no-eval
 source  ~/.bash_profile
 #+END_SRC

 还可以在 =~/.bash_profile= 里加入开关函数，使用起来更方便：

 #+BEGIN_SRC sh :results raw drawer values list :exports no-eval
 function proxy_off(){
     unset http_proxy
     unset https_proxy
     echo -e "已关闭代理"
 }

 function proxy_on() {
     export no_proxy="localhost,127.0.0.1,localaddress,.localdomain.com"
     export http_proxy="http://127.0.0.1:8118"
     export https_proxy=$http_proxy
     echo -e "已开启代理"
 }
 #+END_SRC

 测试当前终端标签/窗口是否走代理：

 #+BEGIN_SRC sh :results raw drawer values list :exports no-eval
 ➜  ~ curl ip.gs
 #+END_SRC

 当前 IP：8.8.8.8 来自：美国加利福尼亚州洛杉矶 choopa.com。

* Emacs 中相关设置
推荐使用 =with-proxy= 这个包，并设置 http(s) 的代理端口：“127.0.0.1:8118”。
当然别忘了，是必须保证 6ftline 也在运行。

#+BEGIN_SRC emacs-lisp :results raw drawer values list :exports no-eval
(defun hurricane-misc/init-with-proxy ()
  (use-package with-proxy
    :config
    (setq with-proxy-http-server "127.0.0.1:8118")))
#+END_SRC

其实这个包的作用就是如下：

#+BEGIN_SRC emacs-lisp :results raw drawer values list :exports no-eval
(defvar hurricane-proxy  "127.0.0.1:8118")

(setq url-proxy-services
      `(("http" . ,hurricane-proxy)
        ("https" . ,hurricane-proxy)
        ("no_proxy" . "^\\(localhost\\|192.168.*\\|10.*\\)")))
#+END_SRC

在只需要某个函数需要代理的情况下，方便使用，不必进行开全局代理。
