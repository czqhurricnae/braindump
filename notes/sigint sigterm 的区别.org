# -*- eval: (setq org-media-note-screenshot-image-dir (concat default-directory "./static/sigint sigterm 的区别/")); -*-
:PROPERTIES:
:ID:       D94F30DA-3205-43C8-9F09-1FFF5FCA8284
:END:
#+LATEX_CLASS: my-article
#+DATE: <2021-05-19 Wed 11:45>
#+TITLE: sigint sigterm 的区别

| SIGHUP    | 终止进程                                   | 终端线路挂断                   |
| SIGINT    | 终止进程                                   | 中断进程                       |
| SIGQUIT   | 建立 CORE 文件终止进程，并且生成 core 文件 |                                |
| SIGILL    | 建立 CORE 文件                             | 非法指令                       |
| SIGTRAP   | 建立 CORE 文件                             | 跟踪自陷                       |
| SIGBUS    | 建立 CORE 文件                             | 总线错误                       |
| SIGSEGV   | 建立 CORE 文件                             | 段非法错误                     |
| SIGFPE    | 建立 CORE 文件                             | 浮点异常                       |
| SIGIOT    | 建立 CORE 文件                             | 执行 I/O 自陷                  |
| SIGKILL   | 终止进程                                   | 杀死进程                       |
| SIGPIPE   | 终止进程                                   | 向一个没有读进程的管道写数据   |
| SIGALARM  | 终止进程                                   | 计时器到时                     |
| SIGTERM   | 终止进程                                   | 软件终止信号                   |
| SIGSTOP   | 停止进程                                   | 非终端来的停止信号             |
| SIGTSTP   | 停止进程                                   | 终端来的停止信号               |
| SIGCONT   | 忽略信号                                   | 继续执行一个停止的进程         |
| SIGURG    | 忽略信号                                   | I/O 紧急信号                   |
| SIGIO     | 忽略信号                                   | 描述符上可以进行 I/O           |
| SIGCHLD   | 忽略信号                                   | 当子进程停止或退出时通知父进程 |
| SIGTTOU   | 停止进程                                   | 后台进程写终端                 |
| SIGTTIN   | 停止进程                                   | 后台进程读终端                 |
| SIGXGPU   | 终止进程                                   | CPU 时限超时                   |
| SIGXFSZ   | 终止进程                                   | 文件长度过长                   |
| SIGWINCH  | 忽略信号                                   | 窗口大小发生变化               |
| SIGPROF   | 终止进程                                   | 统计分布图用计时器到时         |
| SIGUSR1   | 终止进程                                   | 用户定义信号 1                 |
| SIGUSR2   | 终止进程                                   | 用户定义信号 2                 |
| SIGVTALRM | 终止进程                                   | 虚拟计时器到时                 |

* SIGHUP
本信号在用户终端连接（正常或非正常）结束时发出，通常是在终端的控制进程结束时，通知同一 session 内的各个作业，这时它们与控制终端不再关联。

* SIGINT
程序终止（interrupt）信号，在用户键入 INTR 字符（通常是 Ctrl-C）时发出。

SIGINT is the interrupt signal. The terminal sends it to the foreground process when the user presses ctrl-c.
The default behavior is to terminate the process, but it can be caught or ignored.
The intention is to provide a mechanism for an orderly, graceful shutdown.

SIGINT can be caught and handled.
It's like telling the process "Please stop what you're doing." The process is free to ignore the signal, or implement a handler that does anything it wants.
The default behavior is to terminate, and this is what most processes will do.
It's typical, but not required, for a process to handle SIGINT by gracefully terminating -- closing any open files, network connections, or database handles and stopping the current operation in such a way that prevents data loss or corruption.

When you do Ctrl-C in the terminal, the terminal sends SIGINT to the running process.
Like I said before, most processes will gracefully terminate on receiving SIGINT.
Once it's terminated, it's just as surely ended as if it had been SIGKILL'ed or exited normally -- you shouldn't expect to see it in ps because it's still gone.

But there are some programs that don't respond to SIGINT in that way.
bash is one example; if you hit Ctrl-C at a shell prompt, it'll just cancel whatever you've typed on that line -- not terminate the whole shell. Again, this is because the behavior when a process receives SIGINT is determined by the process itself.
vi is another program that doesn't handle SIGINT by terminating.

* SIGQUIT
和 SIGINT 类似，但由 QUIT 字符（通常是 Ctrl-）来控制。进程在因收到 SIGQUIT 退出时会产生 core 文件，在这个意义上类似于一个程序错误信号。

SIGQUIT is the dump core signal.
The terminal sends it to the foreground process when the user presses ctrl-.
The default behavior is to terminate the process and dump core, but it can be caught or ignored.
The intention is to provide a mechanism for the user to abort the process.
You can look at SIGINT as "user-initiated happy termination" and SIGQUIT as "user-initiated unhappy termination."

* SIGILL
执行了非法指令。通常是因为可执行文件本身出现错误，或者试图执行数据段。堆栈溢出时也有可能产生这个信号。

* SIGTRAP
由断点指令或其它 trap 指令产生。由 debugger 使用。

* SIGABRT
程序自己发现错误并调用 abort 时产生。

* SIGIOT
在 PDP-11 上由 iot 指令产生，在其它机器上和 SIGABRT 一样。

* SIGBUS
非法地址，包括内存地址对齐（alignment）出错。eg：访问一个四个字长的整数，但其地址不是 4 的倍数。

* SIGFPE
在发生致命的算术运算错误时发出。不仅包括浮点运算错误，还包括溢出及除数为 0 等其它所有的算术的错误。

* SIGKILL
用来立即结束程序的运行。本信号不能被阻塞，处理和忽略。

SIGKILL is the kill signal. The only behavior is to kill the process, immediately. As the process cannot catch the signal, it cannot cleanup, and thus this is a signal of last resort.

* SIGUSR1
留给用户使用。

* SIGSEGV
试图访问未分配给自己的内存，或试图往没有写权限的内存地址写数据。

* SIGUSR2
留给用户使用。

* SIGPIPE
Broken pipe。

* SIGALRM
时钟定时信号，计算的是实际的时间或时钟时间。alarm 函数使用该信号。

* SIGTERM
程序结束（terminate）信号，与 SIGKILL 不同的是该信号可以被阻塞和处理。通常用来要求程序自己正常退出。shell 命令 kill 缺省产生这个信号。

SIGTERM is the termination signal. The default behavior is to terminate the process, but it also can be caught or ignored.
The intention is to kill the process, gracefully or not, but to first allow it a chance to cleanup.

* SIGCHLD
子进程结束时，父进程会收到这个信号。

* SIGCONT
让一个停止（stopped）的进程继续执行。本信号不能被阻塞。可以用一个 handler 来让程序在由 stopped 状态变为继续执行时完成特定的工作。例如，重新显示提示符。

* SIGSTOP
停止（stopped）进程的执行。注意它和 terminate 以及 interrupt 的区别：该进程还未结束，只是暂停执行。本信号不能被阻塞，处理或忽略。

SIGSTOP is the pause signal. The only behavior is to pause the process; the signal cannot be caught or ignored.
The shell uses pausing (and its counterpart, resuming via SIGCONT) to implement job control.

* SIGTSTP
停止进程的运行，但该信号可以被处理和忽略。用户键入 SUSP 字符时（通常是 Ctrl-Z）发出这个信号。

* SIGTTIN
当后台作业要从用户终端读数据时，该作业中的所有进程会收到 SIGTTIN 信号。缺省时这些进程会停止执行。

* SIGTTOU
类似于 SIGTTIN，但在写终端（或修改终端模式）时收到。

* SIGURG
有“紧急”数据或 out-of-band 数据到达 socket 时产生。

* SIGXCPU
超过 CPU 时间资源限制。这个限制可以由 getrlimit/setrlimit 来读取/改变。

* SIGXFSZ
超过文件大小资源限制。

* SIGVTALRM
虚拟时钟信号。类似于 SIGALRM，但是计算的是该进程占用的 CPU 时间。

* SIGPROF
类似于 SIGALRM/SIGVTALRM，但包括该进程用的 CPU 时间以及系统调用的时间。

* SIGWINCH
窗口大小改变时发出。

* SIGIO
文件描述符准备就绪，可以开始进行输入/输出操作。

* SIGPWR
Power failure。

有两个信号可以停止进程：SIGTERM 和 SIGKILL。
SIGTERM 比较友好，进程能捕捉这个信号，根据您的需要来关闭程序。在关闭程序之前，您可以结束打开的记录文件和完成正在做的任务。
在某些情况下，假如进程正在进行作业而且不能中断，那么进程可以忽略这个 SIGTERM 信号。

对于 SIGKILL 信号，进程是不能忽略的。这是一个 “我不管您在做什么，立刻停止”的信号。假如您发送 SIGKILL 信号给进程，Linux 就将进程停止在那里。
