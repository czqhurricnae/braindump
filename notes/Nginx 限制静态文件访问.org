# -*- eval: (setq org-media-note-screenshot-image-dir (concat default-directory "./static/Nginx 限制静态文件访问/")); -*-
:PROPERTIES:
:ID:       8762BA91-2346-4C2A-B664-95021C5A9162
:END:
#+LATEX_CLASS: my-article
#+DATE: <2021-07-02 Fri 11:10>
#+TITLE: Nginx 限制静态文件访问

静态文件对于大多数 website 是不可或缺的一部分。使用 Nginx 来处理静态文件也是常见的方式。然而，一些静态文件，我们并不像任何情况下都公开给任何用户。
例如一些提供给用户下载的文件，一些用户上传的涉及用户隐私的图片等。我们我希望用户登录的情况下可以访问，未登录的用户则不可见。

粗略的处理，在后端程序可以做过滤，渲染页面的时候，在视图逻辑里面验证用户登录，然后返回对应的页面。

#+BEGIN_SRC python :results raw drawer values list :exports no-eval
@app.router('/user/idcard'):
def user_idcard_page():
    if user is login:
        return '<img src="/upload/user/xxx.png'>"
    else:
        reutrn '<p>Pemission Denied<p>', 403
#+END_SRC

可是这样的处理，还有一个问题，静态文件是交给 nginx 处理的，如果 hacker 找到了文件的绝对地址，直接访问 =http://www.example.com/upload/user/xxx.png= 也是可以的。
恰巧这些文件又涉及用户隐私，比如用户上传的身份证照片。那么码农可不希望第二天媒体报道，知名网站 XXX 存在漏洞，Hacker 获取了用户身份证等信息。

为了做这样的限制，可以借助 Nginx 的一个小功能---[[http://wiki.nginx.org/XSendfile][XSendfile]]。
其原理也比较简单，大概就是使用了请求重定向。

我们知道，如果用 Nginx 做服务器前端的反向代理，一个请求进来，nginx 先补捉到，然后再根据规则转发给后端的程序处理，或者直接处理返回。
前者处理一些动态逻辑，后者多是处理静态文件。
因此上面那个例子中，直接访问静态文件的绝对地址，Nginx 就直接返回了，并没有调用后端的 =user_idcard_page= 做逻辑限制。

为了解决这个问题，nginx 提供的 XSendfile 功能，简而言之就是用 =internal= 指令。
该指令表示只接受内部的请求，即后端转发过来的请求。后端的视图逻辑中，需要明确的写入 =X-Accel-Redirect= 这个 headers 信息。

伪代码如下：

#+BEGIN_SRC python :results raw drawer values list :exports no-eval
@app.router('upload/<filename>')
@login_required
def upload_file(filename):
    response = make_response()
    response['Content-Type'] = 'application/png'
    response['X-Accel-Redirect'] = '/vagrant/upload/%s' % filename
    return response
#+END_SRC

#+BEGIN_EXAMPLE
location /upload/(.*) {
        alias /vagrant/;
        internal;
}
#+END_EXAMPLE

经过这样的处理，就能将静态资源进行重定向。这样的用法还是比较常见的，很多下载服务器可以通过这样的手段针对用户的权限做下载处理。

Flask 是我喜欢的 web 框架，Flask 甚至实现了一个 sendfile 的方法，比上面的做法还简单。
我用 vagrant 作了一个虚拟机，用 Flask 实现了上面的需求，具体代码如下：

项目结构：

#+BEGIN_EXAMPLE
project
  app.py
  templates
  static
    0.jpeg
  upload
    0.jpeg
#+END_EXAMPLE

nginx 的配置 nginx conf：

#+BEGIN_EXAMPLE
server {
        listen 80 default_server;

        # server_name localhost;
        server_name 192.168.33.10;
        location / {
                proxy_pass http://127.0.0.1:8888;
                proxy_redirect off;
                proxy_set_header Host $host:8888;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        # 正常的静态文件
        location /static/(.*) {
                root /vagrant/;

        }
        # 用户上传的文件，需要做权限限制
        location /upload/(.*) {
                alias /vagrant/;
                internal;    # 只接受内部请求的指令
        }
}
#+END_EXAMPLE

Flask 代码：

#+BEGIN_SRC python :results raw drawer values list :exports no-eval
from functools import wraps
from flask import Flask, render_template, redirect, url_for, session, send_file

app = Flask(__name__)

app.config['SECRET_KEY'] = 'you never guess'


def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not session.get('login'):
            return redirect(url_for('login', next=request.url))
        return f(*args, **kwargs)

    return decorated_function


@app.route('/')
def index():
    return 'index'


@app.route('/user')
@login_required
def user():
    return render_template('upload.html')


# 用户上传的文件视图处理，在此处返回请求给 nginx。
@app.route('/upload/<filename>')
@login_required
def upload(filename):
    return send_file('upload/{}'.format(filename))


@app.route('/login')
def login():
    session['login'] = True
    return 'log in'


@app.route('/logout')
def logout():
    session['login'] = False
    return 'log out'


if __name__ == '__main__':
    app.run(debug=True)
#+END_SRC

简单部署：

#+BEGIN_EXAMPLE
    gunicorn -w4 -b0.0.0.0:8888 app:app  --access-logfile access.log --error-logfile error.log
#+END_EXAMPLE

代码示例
[[https://link.jianshu.com/?t=https://github.com/rsj217/flask--scaffold/tree/master/nginx-x-sendfile][https://github.com/rsj217/flask--scaffold/tree/master/nginx-x-sendfile]]
