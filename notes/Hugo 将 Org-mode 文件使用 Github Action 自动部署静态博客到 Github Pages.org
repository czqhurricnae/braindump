# -*- eval: (setq org-media-note-screenshot-image-dir (concat default-directory "./static/Hugo 将 Org-mode 文件使用 Github Action 自动部署静态博客到 Github Pages/")); -*-
:PROPERTIES:
:ID:       B31F8B53-85FA-44E0-B8C5-C665AC709BD0
:END:
#+LATEX_CLASS: my-article
#+DATE: <2022-07-02 Sat 22:59>
#+TITLE: Hugo 将 Org-mode 文件使用 Github Action 自动部署静态博客到 Github Pages
#+ROAM_KEY: https://www.badykov.com/emacs/generating-site-from-org-mode-files/

将博客源码存放在一个 private repo：braindump，发布的静态文件存放在 czqhurricnae/czqhurricnae.github.io 。
分开存放需要获取 =personal_token= 或者 =deploy_key= ，选择使用 =personal_token= 方式。

首先点击 github 头像在下拉栏里进入 =Setting-Developer Settings-Personal access tokens= 。

选择 =Generate new token= 。

[[file:./static/Hugo 将 Org-mode 文件使用 Github Action 自动部署静态博客到 Github Pages/2022-07-02_23-50-23_1.png]]

在 Note 表单填入名字，勾选 repo 的所有选项。

[[file:static/Hugo 将 Org-mode 文件使用 Github Action 自动部署静态博客到 Github Pages/2022-07-02_23-51-57_2.png]]

还有 admin:repo_hook。

[[file:static/Hugo 将 Org-mode 文件使用 Github Action 自动部署静态博客到 Github Pages/2022-07-02_23-52-30_3.png]]

点击 Generate token 生成 token，并先复制保存该 token。

接下来在源码 repo: braindump 中添加上面的 personal access token。

进入 repo: braindump 的 Settings-Secrets 一栏，选择 New repository secret。

[[file:static/Hugo 将 Org-mode 文件使用 Github Action 自动部署静态博客到 Github Pages/2022-07-02_23-54-04_5.png]]

在下面填入刚才生成的 token，名字注意需要与上面 yml 文件里 ACTION_ACCESS_TOKEN 相同

personal_token: ${{ secrets.ACTION_ACCESS_TOKEN }}。

* GitHub actions Permalink
The site is built from org-mode files with [[https://github.com/features/actions][github actions]] and [[https://gohugo.io/][hugo]]. It’s CI/CD integrated into GitHub.

Let’s take a look at its steps to get an overview of what’s going on:

** Fetch the project and its theme Permalink

#+BEGIN_SRC awk
      - uses: actions/checkout@v2
        with:
          submodules: true  # Fetch Hugo themes (true OR recursive)
          fetch-depth: 0    # Fetch all history for .GitInfo and .Lastmod
#+END_SRC

This step is straightforward. It just fetches the project and its submodule [[https://github.com/ayrat555/cortex-dark][hugo theme]].

** Install sqlite Permalink

#+BEGIN_SRC awk
   - name: Install org-roam dependencies
        run: |
          sudo apt-get install sqlite3

#+END_SRC

[[https://www.badykov.com/common/org-roam/][org-roam]] uses the SQLite database to store metadata about notes and provide search features. That’s why we have to install SQLite

** Install emacs Permalink

#+BEGIN_SRC awk
      - name: Install emacs
        uses: purcell/setup-emacs@master
        with:
          version: '27.2'
#+END_SRC

This step installs emacs and [[https://github.com/kaushalmodi/ox-hugo][ox-hugo]] which are used to convert org-mode files into hugo markdown files.

** Convert org-mode files to hugo markdown Permalink

#+BEGIN_SRC awk
      - name: Convert org files to hugo
        run: make org2hugo
#+END_SRC

This step does the actual conversion. We will take a closer look into it a little bit later.

** Build and deploy with Hugo Permalink

#+BEGIN_SRC shell
- name: Setup Hugo
  uses: peaceiris/actions-hugo@v2
  with:
    hugo-version: '0.92.0'
    extended: true

- name: Build
  run: hugo

- name: Deploy
  uses: peaceiris/actions-gh-pages@v3
  if: $
  with:
    # github_token: ${{ secrets.GITHUB_TOKEN }} 该项适用于发布到源码相同repo的情况，不能用于发布到其他repo
    external_repository: czqhurricnae/czqhurricnae.github.io
    personal_token: ${{ secrets.ACTION_ACCESS_TOKEN }} # 发布到其他repo需要提供上面生成的personal access token
    publish_dir: ./public # 注意这里指的是要发布哪个文件夹的内容，而不是指发布到目的仓库的什么位置，因为hugo默认生成静态网页到public文件夹，所以这里发布public文件夹里的内容
    publish_branch: main # 发布到哪个branch
    cname: [[http://braindump.badykov.com/][braindump.badykov.com]]
#+END_SRC

The steps above are from [[https://github.com/peaceiris/actions-hugo][the provided hugo actions]] which install hugo, convert markdown file into html files and deploy the project

* Makefile Permalink
The makefile below creates the build directory and call elisp script which installs ox-hugo and converts org-mode files into hugo markdown files.

#+BEGIN_SRC emacs-lisp
BASE_DIR=${shell pwd}
NOTES_ORG_FILES=${BASE_DIR}/notes
EMACS_BUILD_DIR=/tmp/notes-home-build/
BUILD_DIR=/tmp/notes-home-build/.cache/org-persist/
HUGO_SECTION=posts

all: org2hugo

.PHONY: org2hugo
org2hugo:
	mkdir -p $(BUILD_DIR)
	cp -r $(BASE_DIR)/github-online-publish.el $(EMACS_BUILD_DIR)
  # Build temporary minimal EMACS installation separate from the one in the machine.
	HOME=$(EMACS_BUILD_DIR) NOTES_ORG_SRC=$(NOTES_ORG_FILES) HUGO_SECTION=$(HUGO_SECTION) HUGO_BASE_DIR=$(BASE_DIR) emacs -Q --batch --load $(EMACS_BUILD_DIR)/github-online-publish.el --execute "(hurricane/publish)" --kill
#+END_SRC

* Emacs lisp script Permalink

#+BEGIN_SRC emacs-lisp :results raw drawer values list :exports no-eval
;;; GITHUB-ONLINE-PUBLISH --- Minimal emacs installation to build the website -*- lexical-binding: t -*-
;;
;; Author: c <c@MacBook-Pro.local>
;; Copyright © 2022, c, all rights reserved.
;; Created:  1 July 2022
;;
;;; Commentary:
;;
;; - Requires NOTES_BASE_ORG_SOURCE environment variable
;;
;;; Code:

(require 'subr-x)

(toggle-debug-on-error)      ;; Show debug informaton as soon as error occurs.

(setq make-backup-files nil) ;; Disable "<file>~" backups.

(defconst notes-org-files
  (let* ((env-key "NOTES_ORG_SRC")
         (env-value (getenv env-key)))
    (if (and env-value (file-directory-p env-value))
        env-value
      (error (format "%s is not set or is not an existing directory (%s)" env-key env-value)))))

;; Setup packages using straight.el: https://github.com/raxod502/straight.el
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(setq straight-use-package-by-default t)
(straight-use-package 'use-package)

(require 'font-lock)

(use-package backtrace)

(use-package s
  :straight
  (:type git
   :host github
   :repo "magnars/s.el"))

(use-package dash
  :straight
  (:type git
   :host github
   :repo "magnars/dash.el"))

(use-package f
  :straight
  (:type git
   :host github
   :repo "rejeep/f.el"))

(use-package find-lisp)

(use-package org
  :straight
  (:type git
   :host github
   :repo "bzg/org-mode"))

(use-package ox-publish
  :straight
  (:type git
   :host github
   :repo "bzg/org-mode"))

(use-package ox-html
  :straight
  (:type git
   :host github
   :repo "bzg/org-mode"))

(use-package htmlize
  :straight
  (:type git
   :host github
   :repo "hniksic/emacs-htmlize"))

(use-package emacsql
  :straight
  (:type git
   :host github
   :repo "skeeto/emacsql"))

(use-package emacsql-sqlite
  :straight
  (:type git
   :host github
   :repo "skeeto/emacsql"))

(use-package org-roam
  :straight
  (:type git
   :host github
   :repo "org-roam/org-roam"))

(use-package org-roam-db
  :straight
  (:type git
   :host github
   :repo "org-roam/org-roam"))

(use-package ox-hugo
  :straight
  (
   :type git
   :host github
   :repo "kaushalmodi/ox-hugo"))

(use-package magit-section
  :straight
  (:type git
   :host github
   :repo "magit/magit"))

(use-package tomelr
  :straight
  (:type git
   :host github
   :repo "kaushalmodi/tomelr"))

(setq org-confirm-babel-evaluate nil)
(setq org-hugo-export-with-toc t)
(setq org-hugo-base-dir
      (let* ((env-key "HUGO_BASE_DIR")
             (env-value (getenv env-key)))
        (if (and env-value (file-directory-p env-value))
            env-value
          (error (format "%s is not set or is not an existing directory (%s)" env-key env-value)))))
(setq org-hugo-section "posts")
(setq org-roam-directory (concat notes-org-files "/"))
(setq org-roam-db-location (concat notes-org-files "/" "org-roam.db"))
(setq org-id-extra-files (find-lisp-find-files org-roam-directory "\.org$"))

(org-roam-db-sync)

(org-link-set-parameters
 "x-devonthink-item"
 :export (lambda (path desc backend)
           (cond
            ((eq 'md backend)
             (format "<font color=\"red\"> <a href=\"x-devonthink-item:%s\">%s </a> </font>"
                     path
                     desc)))))

(defun hurricane//org-video-link-export (path desc backend)
  (let ((ext (file-name-extension path)))
    (cond
     ((eq 'md backend)
      (format "<video preload='metadata' controls='controls'><source type='video/%s' src='%s' /></video>" ext path))
     ;; fall-through case for everything else.
     (t
      path))))

(org-link-set-parameters "video" :export 'hurricane//org-video-link-export)

(defun hurricane//collect-backlinks-string (backend)
  (when (org-roam-node-at-point)
    (let* ((source-node (org-roam-node-at-point))
           (source-file (org-roam-node-file source-node))
           (nodes-in-file (--filter (s-equals? (org-roam-node-file it) source-file)
                                    (org-roam-node-list)))
           (nodes-start-position (-map 'org-roam-node-point nodes-in-file))
           ;; Nodes don't store the last position, so get the next headline position
           ;; and subtract one character (or, if no next headline, get point-max)
           (nodes-end-position (-map (lambda (nodes-start-position)
                                       (goto-char nodes-start-position)
                                       (if (org-before-first-heading-p) ;; file node
                                           (point-max)
                                         (call-interactively
                                          'org-forward-heading-same-level)
                                         (if (> (point) nodes-start-position)
                                             (- (point) 1) ;; successfully found next
                                           (point-max)))) ;; there was no next
                                     nodes-start-position))
           ;; sort in order of decreasing end position
           (nodes-in-file-sorted (->> (-zip nodes-in-file nodes-end-position)
                                      (--sort (> (cdr it) (cdr other))))))
      (dolist (node-and-end nodes-in-file-sorted)
        (-when-let* (((node . end-position) node-and-end)
                     (backlinks (--filter (->> (org-roam-backlink-source-node it)
                                               (org-roam-node-file)
                                               (s-contains? "private/") (not))
                                          (org-roam-backlinks-get node)))
                     (heading (format "\n\n%s Backlinks\n"
                                      (s-repeat (+ (org-roam-node-level node) 1) "*")))
                     (details-tag-heading "#+BEGIN_EXPORT html\n<details>\n  <summary>Click to expand!</summary>\n\n<blockquote>\n#+END_EXPORT
")
                     (details-tag-ending "#+BEGIN_EXPORT html\n  </blockquote>\n</details>\n\n#+END_EXPORT")
                     (reference-and-footnote-string-list
                      (-map (lambda (backlink)
                              (let* ((source-node (org-roam-backlink-source-node backlink))
                                     (source-file (org-roam-node-file source-node))
                                     (properties (org-roam-backlink-properties backlink))
                                     (outline (when-let ((outline (plist-get properties :outline)))
                                                (when (> (length outline) 1)
                                                  (mapconcat #'org-link-display-format outline " > "))))
                                     (point (org-roam-backlink-point backlink))
                                     (text (s-replace "\n" " " (org-roam-preview-get-contents
                                                                source-file
                                                                point)))
                                     (reference (format "%s [[id:%s][%s]]\n%s\n%s\n\n"
                                                        (s-repeat (+ (org-roam-node-level node) 2) "*")
                                                        (org-roam-node-id source-node)
                                                        (org-roam-node-title source-node)
                                                        (if outline (format "%s (/%s/)"
                                                                            (s-repeat (+ (org-roam-node-level node) 3) "*") outline) "")
                                                        text))
                                     (label-list (with-temp-buffer
                                                   (insert-file-contents source-file)
                                                   (org-element-map (org-element-parse-buffer) 'footnote-reference
                                                     (lambda (reference)
                                                       (org-element-property :label reference)))))
                                     (footnote-list
                                      (with-temp-buffer
                                        (insert-file-contents source-file)
                                        (-map (lambda (label) (buffer-substring-no-properties
                                                               (nth 1 (org-footnote-get-definition label))
                                                               (nth 2 (org-footnote-get-definition label))))
                                              label-list)))
                                     (footnote-string-list (string-join footnote-list "\n"))
                                     (reference-and-footnote-string (format "%s\n%s" reference footnote-string-list)))
                                reference-and-footnote-string)
                              ) backlinks)))
          (goto-char end-position)
          (insert (format "%s\n%s\n%s\n%s" heading details-tag-heading (string-join reference-and-footnote-string-list "\n")  details-tag-ending)))))))

(add-hook 'org-export-before-processing-hook 'hurricane//collect-backlinks-string)

(defun hurricane//org-html-wrap-blocks-in-code (src backend info)
  "Wrap a source block in <pre><code class=\"lang\">.</code></pre>"
  (when (org-export-derived-backend-p backend 'html)
    (replace-regexp-in-string
     "\\(</pre>\\)" "</code>\n\\1"
     (replace-regexp-in-string "<pre class=\"src src-\\([^\"]*?\\)\">"
                               "<pre>\n<code class=\"\\1\">\n" src))))

(with-eval-after-load 'ox-html
  (add-to-list 'org-export-filter-src-block-functions
               'hurricane//org-html-wrap-blocks-in-code))

(defun batch-export-org-files-to-md (dir)
  "Export all org files in directory DIR to markdown."
  (let ((files (directory-files-recursively dir "\\`[^.#].*\\.org\\'")))
    (dolist (file files)
      (message "process %s" file)
      (with-current-buffer (find-file-noselect file)
        (let ((org-id-extra-files (find-lisp-find-files org-roam-directory "\.org$")))
          (org-hugo-export-wim-to-md t))))))

(defun hurricane/publish ()
  (batch-export-org-files-to-md org-roam-directory))

(provide 'hurricane/publish)
;;; github-online-publish.el ends here

#+END_SRC

* Conclusion Permalink

You can check out the original scripts in [[https://github.com/ayrat555/braindump][my braindump repo]].
