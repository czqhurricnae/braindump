# -*- eval: (setq org-download-image-dir (concat default-directory "./static/org 表格/")); -*-
:PROPERTIES:
:ID:       47CBD3B5-F2F2-435F-8CB2-A5FDBFC61FCA
:END:
#+LATEX_CLASS:my-article
#+DATE: <2020-03-16 Mon>
#+TITLE: org 表格

* DONE org 表格
  CLOSED: [2018-09-05 Wed 17:05]

  - State "DONE"       from "NEXT"       [2018-09-05 Wed 17:05]

** 标题格式
+ 以 # 号后加一空格开始的行表示注释
+ 以 #+ 符号开始的行用于设置文档参数或内容属性
+ 比如文档的标题，作者，org-mode 打开时文档的呈现状态等
+ 以 * 符号开始的行，表示该行为标题
+ 标题内容前的 TODO 标记是待办任务的标记符号
+ 用 [[]] 括起来的内容表示外部链接
+ 用 <<>> 括起来的内容表示文档的内部链接
+ 标题行后面两个：符号间的内容表示标签（TAG）
+ KEYRORD 为 TODO 关键词，大小写敏感

标题的完整语法

#+BEGIN_SRC emacs-lisp
STARS KEYWORD PRIORITY TITLE TAGS
#+END_SRC

** 设定文档属性
+ #+STARTUP: overview
+ #+STARTUP: content
+ #+STARTUP: showall
+ #+STARTUP: showeverything

** 标题快捷键
*** 在标题间移动光标
 | 快捷键    | 动作                        |
 |-----------+-----------------------------|
 | C-c C-p/n | 移动到上/下一个标题         |
 | C-c C-b/f | 移动到同级别的上/下一个标题 |
 | C-c C-u   | 上一级标题                  |

*** 标题编辑
 | 快捷键         | 动作                                             |
 |----------------+--------------------------------------------------|
 | M-LEFT/RIGHT   | 升级/降级当前标题, 不允许有子标题的存在          |
 | M-S-LEFT/RIGHT | 升级/降级标题树, 即标题树内的各级标题相应升/降级 |
 | M-UP/DOWN      | 在同级标题间上/下移标题树, 不能跨级别移动        |
 | M-RET          | 在当前标题后插入同级标题符号 (即换行符和星号)    |
 | C-RET          | 在当前标题树后插入同级标题符号                   |
 | M-S-RET        | 在当前标题后插入同级 TODO 标题                   |
 | C-S-RET        | 在当前标题树后插入同级 TODO 标题                 |
 | C-c *          | 把光标所在行转成标题                             |
 | C-c -          | 把光标所在行转成列表                             |

** 表格
*** 创建表格
一个完整的表格一般是有 header （就是表示列名那一行） 的，
要有 header 的话就需要 “-” 组成的分隔线，有两种方式可以插入分隔线。

第一种办法是新起一行，对齐后输入 “|-” ，即一个列分隔附跟一个连字符，如下所示：

#+BEGIN_SRC emacs-lisp
| 单元格 | 单元格 | 单元格 |
|-|
#+END_SRC

然后按 TAB 键, 就会补全成为这样的样式了：

#+BEGIN_SRC emacs-lisp
| 单元格 | 单元格 | 单元格 |
|-------+-------+-------|
#+END_SRC

第二种办法是使用 “C-c -”这个快捷键来快速插入。
除了手动创建表格，还可以通过 “C-c |” 这个快捷键来快速创建指定大小的表格。
使用这个快捷键后，会提示输入创建的表格的大小，默认是 5x2 也就是 5 列 2 行的，且其中一行是 header。

第三种创建方法是直接将 buffer 上已有的数据格式化成表格，
比如如果是以逗号（，）分隔的 CSV 格式的数据，
可以将其拷贝到当前在编辑的 Org mode 文档中，选中，然后使用 “C-c |“ 这个快捷键，
就能将其转换成表格形式。
这种方法不会自动插入水平分隔线，所以在完成后，可按自己的需要选择添加或者不添加。
如果数据之间是用空格分隔的，该如何转换呢？选中后使用快捷键“C-u 1 C-c |“ 即可。
更进一步的，
Org mode 提供了 “org-table-import” 这个命令来将外部文件导入到 Org mode 文档中，
并用它来创建表格，与之对应的，命令 “org-table-export” 则能将 Org mode 文档中的表格导出成文件。
文件格式可以是 CSV 的，也可以是以制表符（TAB）或空白字符作为分隔符的。

*** 表格快捷键
| 快捷键         | 说明                                                                                 |
|----------------+--------------------------------------------------------------------------------------|
| TAB            | 切换到下一个单元格，如已是最后一个单元格，则新建一行并跳到该行第一个单元格           |
| M-S-right      | 在当前列前插入一列                                                                   |
| M-S-left       | 删除当前列                                                                           |
| M-S-down       | 在当前行前插入一行                                                                   |
| M-S-up         | 删除当前行                                                                           |
| C-m            | 移动到下一行, 或新建一行                                                             |
| M-up/M-down    | 将当前行往上/下移动                                                                  |
| M-left/M-right | 将当前列往左/右移动                                                                  |
| C-c '          | 编辑当前单元格                                                                       |
| C-c C-x C-w    | 剪切某个区域的表格内容                                                               |
| C-c C-x C-y    | 拷贝复制的内容到表格                                                                 |
| S-return       | 当单元格无内容时, 将其上方第一个非空内容拷贝过来; 否则拷贝当前内容到下一行并随之移动 |
| C-c C-c        | 强制表格重新排列                                                                     |
| C-c ^          | 表格排序                                                                             |
#+TBLFM:

*** 表格公式
Org mode 中的表格的另外一个强大之处，在于它支持公式。
在表格区域使用快捷键 “C-c '”，就可以对表格公式进行编辑，完成后公式会显示在表格下方，以 “#+TBLFM:” 开头，如下图所示。

| 名称 | 单价 | 数量 |  花费 |
|------+------+------+-------|
| 苹果 | 5.86 |    3 | 17.58 |
| 香蕉 |    6 |    3 |    18 |
| 柚子 |  5.9 |    4 |  23.6 |
| 桔子 | 2.75 |    3 |  8.25 |
#+TBLFM: $4=$2*$3

使用 “C-c '” 后能在一个独立的，临时的 buffer 中编辑公式，但我们也可以在表格下方手工添加以 “+TBLFM:” 开头的行， 然后直接添加公式。
上面这个公式表示将第四列的值设为第二列的值与第三列的值的乘积。
在编辑好公式并保存后，将光标移动到公式所在行（即 #+TBLFM 这行）然后使用 “C-c C-c”， 就可以应用公式到表格中。
在 Org mode 的表格公式中，~用 “＠” 来表示行~，~用 “$” 来表示列~，最简单的， “＠3$2” 表示的是第三行第二列的位置。
使用快捷键 “C-c }” 可以开启表格的横纵坐标显示——若要关闭的话也是用它。
如果是用 “C-c '” 来进行公式编辑，在输入表格位置时，会看到表格上对应的位置会在当时高亮，所以建议用这种方式进行编辑。
如果只给一个坐标，则另一个坐标会被设为 “当前行” 或者 “当前列”， 这在批量处理表格内容时会有用。
如果想表示一个区域的话， 用 “..” 来表示。
下面这个表示左上角为第二行第一列单元格，右下角为第四行第三列单元格的区域，共包含 9 个单元格。

#+BEGIN_SRC emacs-lisp
@2$1..@4$3
#+END_SRC

下面这个则表示 “当前行” 的第一列到第三列的区域：

#+BEGIN_SRC emacs-lisp
$1..$3
#+END_SRC

在公式中，可以用 “＠＃” 表示当前行的行号，用 “$＃” 表示当前列的列号，在一些稍复杂点的公式里会有用。

此外，还可以定义常量，变量，或者给某个单元格命名，然后引用它们。
假设其名字为 “name”， 那么 “$name” 就可以引用它了。
常量的定义可以通过 “org-table-formula-constants” 来进行，这样定义的常量是全局的， 果要定义局部的常量，以在 org 文件中添加诸如这样的行：

#+BEGIN_SRC emacs-lisp
#+CONSTANTS: pi=3.14 eps=2.4e-6
#+END_SRC

还可以在当前表格引用其他表格的域，这需要其他表格被命名为某个名字，如“FOO”，我们要在另一个表格中使用其第三行第四列的域，将其值赋给当前表格的第五行第二列，则可以这样写：

#+BEGIN_SRC emacs-lisp
@5$2=remote(FOO, @3$4)
#+END_SRC

Org mode 的表格公式中，四则运算符都能正常使用，不过略有不同，乘号 “*” 的优先级要比除号 “/” 要高，因此

#+BEGIN_SRC emacs-lisp
$3 / $2 * $1
#+END_SRC

会被解释为

#+BEGIN_SRC emacs-lisp
$3 / ($2 * $1)
#+END_SRC

Org mode 默认使用的是 Emacs 中自带的 Calc 这个 package 来进行计算，而 Calc 中提供了相当丰富的计算方法，这里列举一二：

+ 基础算术方法：abs，sign，inv，sqrt，min，max，详见 Arithmetic Functions
+ 对数方法：ln，exp，log，详见 Logarithmic Functions
+ 三角函数：sin，cos，tahn，详见 Trigonometric/Hyperbolic Functions
+ 随机数方法：random
+ 向量/矩阵方法：vunion，vint，vsum，vmean，vmax，vmin，vmedian，详见 Vector/Matrix Functions
+ Calc 的内容比较多，这里不做深入展开，有需要的话可以参考 GNU Emacs Calc Manual。

此外，表格公式还能以 Emacs Lisp 的形式来进行编写，不过要在这种形式的公式前加上单引号 “'”，才能正确求值。
在 Emacs Lisp 形式的公式表达式中，传入的参数会被当作字符串，所有需要用格式化选项 “N” 来指明参数类型都是数值。
如下图，在不加格式化选项时，公式计算出错， 加上 “;N“ 后才得到了正确的结果。

[[file:./static/org 表格/org-table-formula-with-lisp.gif]]

[[file:./static/org 表格/org-table-formula-with-lisp-1.png]]

所有的格式化选项，必须通过分号 “;” 和公式进行分隔并跟随在公式后面，可用的选项有：

+ p：设置计算精度
+ n/s/e/f：设置结果的输出格式
+ n3：输出结果为 3 位有效数字（1.45）
+ s3：输出结果为科学计数法，3 位有效数字（1.45e0）
+ e3：输出结果为工程计数法，3 位有效数字（0.145e1）
+ f3：输出结果精确至小数点后 3 位
+ D/R：计算时使用角度制还是弧度制（如三角函数）
+ F/S：分数还是符号（当为 S 时，若结果不为整数，则显示式子本身，如：sqrt(6)）
+ T/t：时间计算，要求用于计算的值是“HH:MM[:SS]” 的形式，当使用 T 时，输出结果是 “HH:MM:SS” 形式，使用 “t” 时，结果显示为一个数值，默认情况下单位是小时，可以通过变量 org-table-duration-custome-format 来设置
+ E：不使用时，所有空白单元格都会被跳过，不会包含在计算过程中；当使用时，如果还使用了 N，则用 “0” 填充，否则，在普通公式中，用 “nan” 填充，在 emacs lisp 公式中，用空字符串填充
+ N：使用时，将所有域的值视为数字，对于非数值型，用 0 替代
+ L：只用于 emacs lisp 公式，后续如果需要对表格公式的求值进行调试，可以通过快捷键“C-c {”来开启调试模式（或者关闭它）。

*** 表格绘制
使用 Org mode 文档中的表格数据进行绘图有两种方式，一种是使用 Org mode 提供的 “org-plot/gnuplot” 命令直接绘制图像，另外一种是通过在 source block 中读取表格数据来绘图。
前者胜在方便快捷，但需要对 gnuplot 有一定的了解，后者胜在灵活，可以选用自己擅长的可视化方法，而且可以绘制复杂的图形。

**** org-plot/gnuplot
第一种方法依赖 gnuplot 这个外部绘图工具，以及 gnuplot-mode 这个 Emacs 插件。

在依赖满足的情况下，只需要在表格上方添加 “#+PLOT:”，然后在后面填写要传递给 gnuplot 的参数即可：

- 直方图
#+BEGIN_SRC emacs-lisp
#+PLOT: title:"Citas" ind:1 deps:(2 3) type:2d with:histograms set:"yrange [0:]" file:"././static/org 表格/plot.png"
#+PLOT: labels: (1 2)
#+END_SRC

#+PLOT: title:"Citas" ind:1 deps:(2 3) type:2d with:histograms set:"yrange [0:]" file:"././static/org 表格/plot.png"
#+PLOT: labels: (1 2)
| Sede      | Max cites | H-index |
|-----------+-----------+---------|
| Chile     |    257.72 |   21.39 |
| Leeds     |    165.77 |   19.68 |
| Sao Paolo |     71.00 |   11.50 |
| Stockholm |    134.19 |   14.33 |
| Morelia   |    257.56 |   17.67 |

[[file:./static/org 表格/plot.png]]

- 折线图
#+BEGIN_SRC emacs-lisp
#+PLOT: title:"example table" ind:1  type:2d with:lines set:"yrange [0:]" file:"././static/org 表格/plot1.png"
#+PLOT: labels:("first" "second column" "last column")
#+END_SRC

#+PLOT: title:"example table" ind:1  type:2d with:lines set:"yrange [0:]" file:"././static/org 表格/plot1.png"
#+PLOT: labels:("first" "second column" "last column")
| independent var | first dependent var | second dependent var |
|             0.1 |               0.425 |                0.375 |
|             0.2 |              0.3125 |               0.3375 |
|             0.3 |          0.24999993 |           0.28333338 |
|             0.4 |               0.275 |              0.28125 |
|             0.5 |                0.26 |                 0.27 |
|             0.6 |          0.25833338 |           0.24999993 |
|             0.7 |          0.24642845 |           0.23928553 |
|             0.8 |             0.23125 |               0.2375 |
|             0.9 |          0.23333323 |            0.2333332 |
|               1 |              0.2225 |                 0.22 |
|             1.1 |          0.20909075 |           0.22272708 |
|             1.2 |          0.19999998 |           0.21458333 |
|             1.3 |          0.19615368 |           0.21730748 |
|             1.4 |          0.18571433 |           0.21071435 |
|             1.5 |          0.19000008 |            0.2150001 |
|             1.6 |           0.1828125 |            0.2046875 |
|             1.7 |          0.18088253 |            0.1985296 |
|             1.8 |          0.17916675 |           0.18888898 |
|             1.9 |          0.19342103 |           0.21315783 |
|               2 |                0.19 |              0.21625 |
|             2.1 |          0.18214268 |           0.20714265 |
|             2.2 |          0.17727275 |            0.2022727 |
|             2.3 |           0.1739131 |            0.1989131 |
|             2.4 |          0.16770833 |            0.1916667 |
|             2.5 |               0.164 |                0.188 |
|             2.6 |          0.15769238 |           0.18076923 |
|             2.7 |           0.1592591 |            0.1888887 |
|             2.8 |           0.1598214 |           0.18928565 |
|             2.9 |          0.15603453 |            0.1844828 |

[[file:./static/org 表格/plot1.png]]

使用这种 Org mode 自带的绘图方式，除了简便以外，还有一个好处就是表格的 header 能被正确地识别做列名，并在图中用来作为各列数据的 label。

以下是可在 “#+PLOT:” 后面设置的绘图参数

+ title：设置图像的标题
+ ind：用于绘制 x 轴的表中的列
+ deps：除 x 轴以外的其他数据在表中的列，若有多列，用括号括起， 如 “deps:(2, 3)”
+ type：2d，3d，or grid
+ with：设置绘制类型，如 lines，points，boxes，impulses，histograms
+ file：如果需要将绘制的图像保存为文件，则使用该属性
+ labels：给定 deps 的标签，默认为表格 header

详见:https://orgmode.org/worg/org-tutorials/org-plot.html#orgef5c4f7

**** With source block
Org mode 中的表格数据是可以作为变量传递到 source block 中的，如下图所示：

[[file:./static/org 表格/source_block.png]]

如上图所示，要将表格数据传递给 source block，需要两个步骤

用 “#+NAME” 将表格命名为 “citas-data”，
在 source block 的选项中， 用 “:var tbl_data=citas-data” 将表格数据赋值给变量 “tbl_data”。
对于下面这个表格，我可以可以用这个方法将数据传递给 source block，然后用 matplotlib 来绘制图像。

#+NAME: citas-data
| Sede      | Max cites | H-index |
|-----------+-----------+---------|
| Chile     |    257.72 |   21.39 |
| Leeds     |    165.77 |   19.68 |
| Sao Paolo |     71.00 |   11.50 |
| Stockholm |    134.19 |   14.33 |
| Morelia   |    257.56 |   17.67 |

相应的 source block 为

#+BEGIN_SRC python :results file :var tbl_data=citas-data filename="./static/org 表格/org-plot-example2.png"
import numpy as np
import matplotlib
import matplotlib.pyplot as plt


bar_names = [row[0] for row in tbl_data]
h_index = [row[2] for row in tbl_data]
ind = np.arange(len(tbl_data))
width = 0.5

plt.bar(ind, h_index, width)
plt.title('Citas')
plt.xlabel('Sede')
plt.ylabel('H-index')
plt.xticks(ind + width/2., bar_names)

plt.savefig(filename)
return(filename)
#+END_SRC

#+RESULTS:
[[file:./static/org 表格/org-plot-example2.png]]
