# -*- eval: (setq org-download-image-dir (concat default-directory "./static/Graphviz/")); -*-
:PROPERTIES:
:ID:       9882BA7E-2792-46DA-9DB5-10BFD9CECB53
:END:
#+DATE: <2020-07-18 Sat 18:04>
#+TITLE: Graphviz example

#+transclude: [[id:7D3A7185-EE16-454E-8B5C-417D8E78FE17][Graphviz-节点]]

* 为子图设置背景颜色
#+LATEX: \resizebox{\textwidth}{!}{
#+name: cluster-subgraph-table
| *cluster( 必填)* | *label* | *style( 默认"none")* | *color( 默认"black")* | *nodestyle( 默认"none")* | *nodecolor( 默认"black")* | *nodeflow( 必填, 以";" 分隔)* | *kwargs( 以";" 结尾)* |
|------------------+---------+----------------------+-----------------------+--------------------------+---------------------------+-------------------------------+-----------------------|
| cluster_bc       |         |                      |                       |                          |                           | b; c;                         | bgcolor="red";        |
| cluster_de       | Block   |                      |                       |                          |                           | d; e;                         |                       |
#+LATEX: }

#+LATEX: \resizebox{\textwidth}{!}{
#+name: cluster-node-table
| *node( 必填)* | *label* | *shape( 默认"box")* | *style( 可选"filled")* | *fillcolor( 默认"none")* | *fontcolor( 默认"black")* | *fontsize( 默认"18", 数字必须是字符串格式)* | *kwargs( 以"," 结尾)* |
|--------------+---------+--------------------+-----------------------+-------------------------+--------------------------+-------------------------------------------+---------------------------|
#+LATEX: }

#+LATEX: \resizebox{\textwidth}{!}{
#+name: cluster-graph-table
| *from* | *to* | *label* | *style( 默认"bold", 可选"dotted") | *color( 默认"black")* | *fontcolor* | *tailport( 可选"n","ne","e","se","sw","w","nw")* | *lhead( 为子图的名称即 cluster 列的值)* | *ltail( 为子图的名称即 cluster 列的值)* | *kwargs( 以" " 结尾)* |
|--------+------+---------+-----------------------------------+-----------------------+-------------+--------------------------------------------------+-----------------------------------------+-----------------------------------------+-----------------------|
| a      | b    |         |                                   |                       |             |                                                  |                                         |                                         |                       |
| a      | c    |         |                                   |                       |             |                                                  |                                         |                                         |                       |
| c      | e    |         |                                   |                       |             |                                                  |                                         |                                         |                       |
| b      | d    |         |                                   |                       |             |                                                  |                                         |                                         |                       |
#+LATEX: }

#+name: create-cluster-from-tables
#+HEADER: :var subgraph=cluster-subgraph-table nodes=cluster-node-table graph=cluster-graph-table
#+BEGIN_SRC emacs-lisp :results output :exports none
(concat
    (princ "//rankdir=LR;\n") ;; remove comment characters '//' for horizontal layout; add for vertical layout
    (princ "compound=true;\n")
    (mapconcat
      (lambda (x)
        (princ (replace-regexp-in-string "\\\\vert" "|" (format "subgraph %s {label=\"%s\"; style=%s; color=%s; node [style=%s, color=%s]; %s %s}
"
                          (car x)
                          (nth 1 x)
                          (if (string= "" (nth 2 x)) "none" (nth 2 x))
                          (if (string= "" (nth 3 x)) "black" (nth 3 x))
                          (if (string= "" (nth 4 x)) "none" (nth 4 x))
                          (if (string= "" (nth 5 x)) "black" (nth 5 x))
                          (nth 6 x)
                          (nth 7 x)
                          )))) subgraph "
")
    "\n"
    (mapconcat
      (lambda (x)
        (princ (replace-regexp-in-string "\\\\vert" "|" (format "%s[label=\"%s\", shape=%s, style=\"%s\", fillcolor=\"%s\", fontcolor=\"%s\", fontsize=\"%s\", %s];\n"
                          (car x)
                          (nth 1 x)
                          (if (string= "" (nth 2 x)) "box" (nth 2 x))
                          (if (string= "" (nth 3 x)) "none" (nth 3 x))
                          (if (string= "" (nth 4 x)) "none" (nth 4 x))
                          (if (string= "" (nth 5 x)) "black" (nth 5 x))
                          (if (string= "" (nth 6 x)) "18" (nth 6 x))
                          (nth 7 x)
                          )))) nodes "
")
    "\n"
    (mapconcat
    (lambda (x)
      (princ (replace-regexp-in-string "\\\\vert" "|" (format "%s -> %s [label=\"%s\" style=%s color=%s fontcolor=\"%s\" tailport=%s lhead=%s ltail=%s %s];\n"
              (car x)
              (nth 1 x)
              (nth 2 x)
              (if (string= "" (nth 3 x)) "bold" (nth 3 x))
              (if (string= "" (nth 4 x)) "black" (nth 4 x))
              (if (string= "" (nth 5 x)) "black" (nth 5 x))
              (if (string= "" (nth 6 x)) "none" (nth 5 x))
              (if (string= "" (nth 7 x)) "none" (nth 6 x))
              (if (string= "" (nth 8 x)) "none" (nth 7 x))
              (nth 9 x)
              )))) graph "\n"))
#+END_SRC

#+RESULTS: create-cluster-from-tables
: //rankdir=LR;
: compound=true;
: subgraph cluster_bc {label=""; style=none; color=black; node [style=none, color=black]; b; c; bgcolor="red";}
: subgraph cluster_de {label="Block"; style=none; color=black; node [style=none, color=black]; d; e; }
: a -> b [label="" style=bold color=black fontcolor="black" tailport=none lhead=none ltail=none ];
: a -> c [label="" style=bold color=black fontcolor="black" tailport=none lhead=none ltail=none ];
: c -> e [label="" style=bold color=black fontcolor="black" tailport=none lhead=none ltail=none ];
: b -> d [label="" style=bold color=black fontcolor="black" tailport=none lhead=none ltail=none ];

#+BEGIN_SRC dot ./static/Graphviz example/cluster.png :var input=create-cluster-from-tables :exports results
digraph {
  $input
}
#+END_SRC

#+RESULTS:
[[file:./static/Graphviz Example/cluster.png]]

* 从左到右布局
默认情况下图是从上到下布局的, 通过设置 rankdir="LR" 可以让图从左到右布局.

#+LATEX: \resizebox{\textwidth}{!}{
#+name: pipeline-subgraph-table
| *cluster( 必填)* | *label* | *style( 默认"none")* | *color( 默认"black")* | *nodestyle( 默认"none")* | *nodecolor( 默认"black")* | *nodeflow( 必填, 以";" 分隔)* | *kwargs( 以";" 结尾)* |
|-----------------+---------+---------------------+----------------------+-------------------------+--------------------------+-----------------------+---------------------|
#+LATEX: }

#+LATEX: \resizebox{\textwidth}{!}{
#+name: pipeline-node-table
| *node( 必填)* | *label*    | *shape( 默认"box")* | *style( 可选"filled")* | *fillcolor( 默认"none")* | *fontcolor( 默认"black")* | *fontsize( 默认"18", 数字必须是字符串格式)* | *kwargs( 以"," 结尾)* |
|--------------+------------+--------------------+-----------------------+-------------------------+--------------------------+-------------------------------------------+---------------------|
| g            | Gitlab     | ellipse            |                       |                         |                          |                                           |                     |
| j            | Jenkins    | ellipse            |                       |                         |                          |                                           |                     |
| t            | Testing    | ellipse            |                       |                         |                          |                                           |                     |
| p            | Production | ellipse            |                       |                         |                          |                                           | color="red",        |
#+LATEX: }

#+LATEX: \resizebox{\textwidth}{!}{
#+name: pipeline-graph-table
| *from* | *to* | *label*  | *style( 默认"bold", 可选"dotted") | *color( 默认"black")* | *fontcolor* | *tailport( 可选"n","ne","e","se","sw","w","nw")* | *lhead( 为子图的名称即 cluster 列的值)* | *ltail( 为子图的名称即 cluster 列的值)* | *kwargs( 以" " 结尾)* |
|--------+------+----------+---------------------------------+----------------------+-------------+-------------------------------------------------+----------------------------------------+----------------------------------------+---------------------|
| g      | j    | Trigger  |                                 |                      |             |                                                 |                                        |                                        |                     |
| j      | t    | Build    |                                 |                      |             |                                                 |                                        |                                        |                     |
| t      | p    | Approved |                                 |                      |             |                                                 |                                        |                                        |                     |
#+LATEX: }

#+name: create-pipeline-from-tables
#+HEADER: :var subgraph=pipeline-subgraph-table nodes=pipeline-node-table graph=pipeline-graph-table
#+BEGIN_SRC emacs-lisp :results output :exports none
  (concat
      (princ "rankdir=LR;\n") ;; remove comment characters '//' for horizontal layout; add for vertical layout
      (princ "compound=true;\n")
      (mapconcat
        (lambda (x)
          (princ (replace-regexp-in-string "\\\\vert" "|" (format "subgraph %s {label=\"%s\"; style=%s; color=%s; node [style=%s, color=%s]; %s %s}
  "
                            (car x)
                            (nth 1 x)
                            (if (string= "" (nth 2 x)) "none" (nth 2 x))
                            (if (string= "" (nth 3 x)) "black" (nth 3 x))
                            (if (string= "" (nth 4 x)) "none" (nth 4 x))
                            (if (string= "" (nth 5 x)) "black" (nth 5 x))
                            (nth 6 x)
                            (nth 7 x)
                            )))) subgraph "
  ")
      "\n"
      (mapconcat
        (lambda (x)
          (princ (replace-regexp-in-string "\\\\vert" "|" (format "%s[label=\"%s\", shape=%s, style=\"%s\", fillcolor=\"%s\", fontcolor=\"%s\", fontsize=\"%s\", %s];\n"
                            (car x)
                            (nth 1 x)
                            (if (string= "" (nth 2 x)) "box" (nth 2 x))
                            (if (string= "" (nth 3 x)) "none" (nth 3 x))
                            (if (string= "" (nth 4 x)) "none" (nth 4 x))
                            (if (string= "" (nth 5 x)) "black" (nth 5 x))
                            (if (string= "" (nth 6 x)) "18" (nth 6 x))
                            (nth 7 x)
                            )))) nodes "
  ")
      "\n"
      (mapconcat
      (lambda (x)
        (princ (replace-regexp-in-string "\\\\vert" "|" (format "%s -> %s [label=\"%s\" style=%s color=%s fontcolor=\"%s\" tailport=%s lhead=%s ltail=%s %s];\n"
                (car x)
                (nth 1 x)
                (nth 2 x)
                (if (string= "" (nth 3 x)) "bold" (nth 3 x))
                (if (string= "" (nth 4 x)) "black" (nth 4 x))
                (if (string= "" (nth 5 x)) "black" (nth 5 x))
                (if (string= "" (nth 6 x)) "none" (nth 5 x))
                (if (string= "" (nth 7 x)) "none" (nth 6 x))
                (if (string= "" (nth 8 x)) "none" (nth 7 x))
                (nth 9 x)
                )))) graph "\n"))
#+END_SRC

#+RESULTS: create-pipeline-from-tables
: rankdir=LR;
: compound=true;
: g[label="Gitlab", shape=ellipse, style="none", fillcolor="none", fontcolor="black", fontsize="18", ];
: j[label="Jenkins", shape=ellipse, style="none", fillcolor="none", fontcolor="black", fontsize="18", ];
: t[label="Testing", shape=ellipse, style="none", fillcolor="none", fontcolor="black", fontsize="18", ];
: p[label="Production", shape=ellipse, style="none", fillcolor="none", fontcolor="black", fontsize="18", color="red",];
: g -> j [label="Trigger" style=bold color=black fontcolor="black" tailport=none lhead=none ltail=none ];
: j -> t [label="Build" style=bold color=black fontcolor="black" tailport=none lhead=none ltail=none ];
: t -> p [label="Approved" style=bold color=black fontcolor="black" tailport=none lhead=none ltail=none ];

#+BEGIN_SRC dot :file ./static/Graphviz example/pipeline.png :var input=create-pipeline-from-tables :exports results
digraph {
  $input
}
#+END_SRC

#+RESULTS:
[[file:./static/Graphviz Example/pipeline.png]]
