# -*- eval: (setq org-download-image-dir (concat default-directory "./static/org 文件树生成/")); -*-
:PROPERTIES:
:ID:       8097C3D1-3B5C-45E0-B7BE-C19FEF3F48A2
:END:
#+LATEX_CLASS: my-article

#+DATE: <2020-05-21 四 06:10>
#+TITLE: org 文件树生成

* Question
  :PROPERTIES:
  :CUSTOM_ID: question
  :END:

When working with Org-Mode, I am looking for a solution to automatically generate tree of well-formed org-mode links.

For instance, to create links to all c++ files under a directory, I want something like:

[[file:./static/org 文件树生成/C7KD1.png]]

--------------

*Update:* I just tried @DamianChrzanowski suggestion, the [[file:./static/org 文件树生成/org-fstree][org-fstree]] package.
However I am a little bit disappointed by the results:

#+DOWNLOADED: https://i.stack.imgur.com/NHYto.png @ 2019-11-26 15:20:28
[[file:./static/org 文件树生成/2019-11-26_15-20-28_NHYto.png]]

The html export result is even worst:

#+DOWNLOADED: https://i.stack.imgur.com/eJzSn.png @ 2019-11-26 15:20:39
[[file:./static/org 文件树生成/2019-11-26_15-20-39_eJzSn.png]]

My conclusion is that package does not fulfil my needs. Anyway, thanks
to @DamianChrzanowski for his answer.

* Answer1
  :PROPERTIES:
  :CUSTOM_ID: answer1
  :END:

With the [[file:./static/org 文件树生成/tree.htm][linux tree command]] installed I came with the following script that fulfils all my needs:

#+BEGIN_SRC sh
    #+NAME: createTree
    #+BEGIN_SRC sh :results drawer :var toInclude="*.org" :var toExclude="" :var directory="./" :var createLink="true" :exports none
    set -e
    buffer=$(mktemp /tmp/buffer.XXXXXXXXX)
    current_directory=$(pwd)
    cd $(eval echo "$directory")
    tree -a -P "$toInclude" -I "$toExclude" -if --noreport  --prune \
        | sed "s/.//"  | sed "s/^\///"  > "$buffer"

    if [ $(grep --regexp="$" --count "$buffer") -eq 0 ]; then
        echo "**ERROR empty list**"
    else
        for f in $(cat "$buffer")
        do
        filename=$(basename $f)
        ext="${filename##*.}"
        baseFilename="${filename%.*}"
        if [ -f $f ]; then
            # removes org extension (only)
            if [ "$ext" = "org" ]; then
            filename="$baseFilename"
            fi
            # creates org link (or not)
            if [ "$createLink" = true ]; then
            echo "$(echo "$f" | tr -cd / | tr / \\t)+ [[file:"$directory/$f"][$filename]]"
            else
            echo "$(echo "$f" | tr -cd / | tr / \\t)+ $filename"
            fi
        else
            echo  "$(echo "$f" | tr -cd / | tr / \\t)+ $filename/"
        fi
        done
    fi
    rm "$buffer"
    cd "$current_directory"
    #+END_SRC
#+END_SRC

If you want to create a file tree of your C++ code, simply use something like:

#+BEGIN_SRC sh
#+CALL: createTree(toInclude="*.[hc]pp",toExclude="*test*",directory="~/MyProject")
#+END_SRC

Also, note that you can use it as an alternative to sitemap when you export/publish your org-mode documents. Simply use:

#+BEGIN_SRC sh
    * My site content

    #+CALL: createTree(toInclude="*.org",toExclude="Setup")
#+END_SRC

The previous =#+CALL= commands will generate tree like the one I posted in my question. After Org HTML export, you will get something like:

#+DOWNLOADED: https://i.stack.imgur.com/KbnyI.png @ 2019-11-26 15:21:21
[[file:./static/org 文件树生成/2019-11-26_15-21-21_KbnyI.png]]

--------------

The command arguments/options are:

- *toInclude="..."* : pattern to include
- *toExclude="..."* : pattern to exclude
- *directory="..."* : directory
- *createLink="true" or "false"* : if false the tree is created without
  links

--------------

*Note 1:* you can store the script in any .org file and load it thanks to [[file:./static/org 文件树生成/Library-of-Babel.html][Library-of-Babel]]:

In your =init.el= file:

#+BEGIN_SRC sh
    (org-babel-lob-ingest "~/path/to/your/scripts.org")
#+END_SRC

--------------

*Note 2:* I answered my own question, but I am still open to a pure Emacs-Lisp solution.

* Answer2
  :PROPERTIES:
  :CUSTOM_ID: answer2
  :END:

There usually is a package :-)
[[file:./static/org 文件树生成/org-fstree][org-fstree]]
